<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MicroMaker&#39;s Blog</title>
  
  <subtitle>My Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://micromaker.github.io/"/>
  <updated>2019-07-28T13:44:58.659Z</updated>
  <id>http://micromaker.github.io/</id>
  
  <author>
    <name>MicroMaker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20190728三人开黑517codingACM模拟赛</title>
    <link href="http://micromaker.github.io/2019/07/28/517codingACManswer20190728/"/>
    <id>http://micromaker.github.io/2019/07/28/517codingACManswer20190728/</id>
    <published>2019-07-28T12:19:55.000Z</published>
    <updated>2019-07-28T13:44:58.659Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>三人组队开黑ACM膜你赛</p><p><img src="https://s2.ax1x.com/2019/07/28/elzfOK.png" alt=""></p><p>果然我最蔡</p><p>我就写了<code>ACF</code>所以就写这些吧awa</p><h4 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h4><p><img src="https://s2.ax1x.com/2019/07/28/e1S6HS.png" alt=""></p><p>人话：给你一个<code>w×h</code>的矩形蛋糕，然后告诉你两个蜡烛的坐标，两个蜡烛都在网格点上且不在蛋糕边缘，问如何切一刀能把蛋糕分成两块且两块分别有一个蜡烛</p><p>分类讨论：</p><p><img src="https://s2.ax1x.com/2019/07/28/e1pyx1.png" alt=""></p><p>第一种情况（p1），蜡烛的<code>y</code>相等：这时候，我们可以从<code>x</code>较小的蜡烛的“底部”切到<code>x</code>较大的蜡烛的顶部</p><p>第二种情况（p2），蜡烛的<code>x</code>相等：这时候，可以从<code>y</code>较小的蜡烛的有“右端”切到<code>y</code>较大的蜡烛的左端</p><p>剩下的情况都是<code>x</code>和<code>y</code>都不相等的了，我们称<code>x</code>较小的点位$P_1$，另一个为$P_2$</p><p>第三种情况（p3），$P_2$的<code>y</code>大于$P_1$的<code>y</code>：这时候，我们可以从$P_1$的”顶端“切到$P_2$的”底端“</p><p>第四种情况（p4），$P_2$的<code>y</code>小于$P_1$的<code>y</code>：这时候，我们可以从$P_1$的”底端“切到$P_2$的”顶端“</p><p>这题不难，Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This code Write By chtholly_micromaker(MicroMaker)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"anniversary.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"anniversary.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> ax,ay,bx,by;</span><br><span class="line"><span class="keyword">int</span> w,h;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w&gt;&gt;h&gt;&gt;ax&gt;&gt;ay&gt;&gt;bx&gt;&gt;by;</span><br><span class="line"><span class="keyword">if</span>(ax&gt;bx)</span><br><span class="line">swap(ax,bx),swap(ay,by);</span><br><span class="line"><span class="keyword">if</span>(ay==by)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ax&gt;bx)</span><br><span class="line">swap(ax,bx);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ax&lt;&lt;<span class="string">" 0 "</span>&lt;&lt;bx&lt;&lt;<span class="string">" "</span>&lt;&lt;h&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ax==bx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ay&gt;by)</span><br><span class="line">swap(ay,by);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"0 "</span>&lt;&lt;ay&lt;&lt;<span class="string">" "</span>&lt;&lt;w&lt;&lt;<span class="string">" "</span>&lt;&lt;by&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ay&gt;by)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ax&lt;&lt;<span class="string">" 0 "</span>&lt;&lt;bx&lt;&lt;<span class="string">" "</span>&lt;&lt;h&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;bx&lt;&lt;<span class="string">" 0 "</span>&lt;&lt;ax&lt;&lt;<span class="string">" "</span>&lt;&lt;h&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C"></a>Problem C</h4><p><img src="https://s2.ax1x.com/2019/07/28/e1C3Xq.png" alt=""></p><p>这大概是我们做的题目中最难的一题了（我好蔡啊）</p><p>人话：告诉你<code>N</code>个选手的<code>CodeCoder</code>与<code>TopForces</code>的<code>Rating</code>，如果一个人的两个<code>Rating</code>中有一个高于另一个人，那么他就可以在<del>luogu咕值</del>排名系统中吊打那个人</p><p>输出<code>N</code>行，第<code>i</code>行表示第<code>i</code>个选手能吊打的人数</p><p>小朋友：贪心搞一搞，$nlogn$水过</p><p>那样会有重叠的统计啊，如何处理？</p><p>小朋友：emm</p><p>这里要注意一点，如果<code>A</code>你能在<code>Rating</code> 上吊打<code>B</code>，而<code>B</code>能在<code>Rating</code>上吊打<code>C</code>，那么<code>A</code>肯定吊打<code>C</code></p><p>小朋友：I can hack it！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p>小朋友：你看<code>2</code>能吊打<code>1</code>，然后<code>3</code>能吊打<code>2</code>，可是<code>3</code>的两个<code>Rating</code>都没有<code>1</code>高啊</p><p><strong>Unsuccessful hacking attempt</strong></p><p>小朋友：？？？</p><p><code>3</code>号选手：抱歉，在排名系统里这样就是可以为所欲为</p><p>那么既然存在这样一种食物链的情况，你想到了什么？对，建图DFS</p><p>若<code>A</code>能在两个<code>Rating</code>中任意一个吊打<code>B</code>，就把<code>A</code>向<code>B</code>连单向边</p><p>然后样例建完图后是这样的：</p><p><img src="https://s2.ax1x.com/2019/07/28/e1VMVI.png" alt=""></p><p>小朋友：好了好了快点告诉我怎么求答案</p><p>我们发现，从第<code>i</code>个点开始遍历所能达到的其他节点的数量就是那个节点代表的选手能吊打的数量</p><p>结束了？</p><p>结束了。</p><p>但这样复杂度好像要爆炸啊</p><p>没关系加个小贪心就变成$O(n)$了</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This code Write By chtholly_micromaker(MicroMaker)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">100050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,idx;</span><br><span class="line">&#125;a[MaxN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt,to;</span><br><span class="line">&#125;E[MaxN&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> hd[MaxN];</span><br><span class="line"><span class="keyword">int</span> ans[MaxN];</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN];</span><br><span class="line"><span class="keyword">int</span> n,en,cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++en;</span><br><span class="line">E[en].nxt=hd[u];</span><br><span class="line">E[en].to=v;</span><br><span class="line">hd[u]=en;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> Node &amp;A,<span class="keyword">const</span> Node &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> Node &amp;A,<span class="keyword">const</span> Node &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> A.y&lt;B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printf("UUUUU %d\n",u);</span></span><br><span class="line"><span class="comment">//printf("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; %d %d\n",u,fa);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];~i;i=E[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=E[i].to;</span><br><span class="line"><span class="keyword">if</span>(vis[v])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//printf("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;. %d\n",v);</span></span><br><span class="line">++cnt;</span><br><span class="line">vis[v]=<span class="literal">true</span>;</span><br><span class="line">dfs(v);</span><br><span class="line"><span class="comment">//vis[v]=false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"codecoder.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"codecoder.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">memset</span>(hd,<span class="number">-1</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line"><span class="keyword">int</span> n;rd(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">rd(a[i].x);rd(a[i].y);</span><br><span class="line">a[i].idx=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">adde(a[i+<span class="number">1</span>].idx,a[i].idx);<span class="comment">//,printf("adde: %d %d\n",a[i].idx,a[i+1].idx);</span></span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">adde(a[i+<span class="number">1</span>].idx,a[i].idx);<span class="comment">//,printf("adde: %d %d\n",a[i].idx,a[i+1].idx);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("&gt;&gt;&gt;&gt;&lt;&lt;&gt;&lt;&gt;&lt;&gt;II %d\n",a[i].idx);</span></span><br><span class="line"><span class="keyword">if</span>(!vis[a[i].idx])</span><br><span class="line"><span class="comment">//dfs(a[i].idx);</span></span><br><span class="line">++cnt,vis[a[i].idx]=<span class="literal">true</span>,dfs(a[i].idx);</span><br><span class="line">ans[a[i].idx]=cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Problem-F"><a href="#Problem-F" class="headerlink" title="Problem F"></a>Problem F</h4><p><img src="https://s2.ax1x.com/2019/07/28/e1ZvnJ.png" alt=""></p><p>人话：给你<code>W×H</code>的<code>纸片1</code>和<code>w×h</code>的<code>纸片2</code>，问<code>纸片1</code>至少要折叠多少次才能变成<code>纸片2</code></p><p>如果不能，就输出<code>-1</code></p><p>首先把<code>w和h</code>、<code>W和H</code>变成<code>w</code>为宽、<code>h</code>为长的形式，方便比较</p><p>如果$W&lt;w$或者$H&lt;h$，说明<code>纸片1</code>比<code>纸片2</code>要小，输出<code>-1</code></p><p>然后来看剩下的：</p><p>每次折叠最多能缩小一般的长度，那么我们每次缩小一半不就一定次数最少了么…</p><p>坑点1：如果长度为<code>9</code>那么直接除以<code>2</code>等于<code>4</code>，但是如果这样折叠那折去的那一面不久是<code>5</code>么…所以每次的操作为$x=x-(x&gt;&gt;1)$而不是$x&gt;&gt;=1$.</p><p>坑点2：</p><p>如果单是这样操作，还是有点问题的：</p><p><img src="https://s2.ax1x.com/2019/07/28/e1mnr4.png" alt=""></p><p>按照我们的方法来做，这应该要两次折叠才能完成啊</p><p>那如果这样呢：</p><p><img src="https://s2.ax1x.com/2019/07/28/e1mUqH.png" alt=""></p><p>好像只要<code>1</code>次就可以了</p><p>emm</p><p>把<code>W</code>和<code>H</code>给<code>swap</code>一下然后和原来的取个<code>min</code>不就好了。。。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This code Write By chtholly_micromaker(MicroMaker)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;y)</span><br><span class="line">x-=(x&gt;&gt;<span class="number">1</span>),++res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"folding.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"folding.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> W,H,w,h;</span><br><span class="line">rd(W);rd(H);rd(w);rd(h);</span><br><span class="line"><span class="keyword">if</span>(W&lt;H)</span><br><span class="line">swap(W,H);</span><br><span class="line"><span class="keyword">if</span>(w&lt;h)</span><br><span class="line">swap(w,h);</span><br><span class="line"><span class="keyword">if</span>(W&lt;w||H&lt;h)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> ans=<span class="number">0x7fffffffffff</span>;</span><br><span class="line">ans=min(ans,getdis(W,w)+getdis(H,h));</span><br><span class="line">ans=min(ans,getdis(W,h)+getdis(H,w));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Ended</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 解题报告" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>solution-luogu4979</title>
    <link href="http://micromaker.github.io/2019/07/21/solution-luogu4979/"/>
    <id>http://micromaker.github.io/2019/07/21/solution-luogu4979/</id>
    <published>2019-07-21T10:11:05.000Z</published>
    <updated>2019-07-21T10:19:35.838Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/P4979" target="_blank" rel="noopener">P4979 矿洞：坍塌</a></p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><ul><li>Made By tomoo</li></ul><p>CYJian家里为什么那么有钱？因为他家\$&amp;@\$%#开了矿！！</p><p>CYJian家虽然有矿，但是有矿也不能任性。这不，CYJian家的矿塌了……</p><p><strong>change:出题人仁慈地放大了空间限制</strong></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>CYJian家的矿塌了之后，就没有经济来源了（不要问我怎么没有存款）。</p><p>于是，CYJian迫切地想要修复他家的矿。</p><p>CYJian家的矿共出产$A,B,C$三种矿石，所以我们也只能用$A,B,C$三种材料来修复他们家的矿。我们已知共有$N$吨材料，每吨材料均为$A,B,C$种材料中的一种，它们连成了一个串，如：</p><p>$ABCBCABCBACBCBAAC$</p><p>YJian家对材料的要求非常严格，他每次会选择一段连续区间的材料作为修复的材料。因为不合要求的材料会使得矿再次塌陷，砸死CYJian，所以这个连续区间的材料必须满足一下<code>2</code>个要求：</p><ul><li>这段连续区间必须是同一种材料</li><li>这段连续区间的前一个材料与后一个材料必须不相同。</li></ul><p>例如，有一段材料为$AACBBABBBCCCBBB$，则<code>(4~5)</code> 区间的 $BB$ 和 <code>(5~5)</code>区间的 $B$ 均符合要求，而 <code>(10~12)</code>区间的 $CCC $不符合要求。</p><p>材料有灵性，所以材料会有变化。</p><p>现在有$N$吨材料，$K$个询问。每个询问是以下的<code>2</code>种形式之一：</p><ul><li><code>A x y op</code> 表示替换材料，将<code>x</code>到<code>y</code>  <code>(1&lt;=x&lt;=y&lt;=N)</code>区间内的材料替换为<code>op</code>，<code>op</code>为$A,B,C$三种材料字符中的一个。</li><li><code>B x y</code> 表示是否询问，即询问<code>x</code>到<code>y</code> <code>(1&lt;=x&lt;=y&lt;=N)</code>区间内的材料是否合法，合法输出<code>Yes</code>，不合法输出<code>No</code>。</li></ul><p>注意:当<code>x=1</code>或<code>y=N</code>时,你的程序不需要判断前后的情况,而只需要判断区间内的情况.</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><p><strong>输入格式：</strong></p><ul><li>第一行一个正整数<code>N</code></li><li>接下来<code>N</code>个字符，表示材料</li><li>接下来<code>K</code>个询问，格式为上述的一种</li></ul><p><strong>输出格式：</strong></p><p>对于每个 <code>B x y</code> 的询问，输出 <code>Yes</code>或 <code>No</code></p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入样例#1：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">AACBBABBBCCCBBB</span><br><span class="line">3</span><br><span class="line">B 4 5</span><br><span class="line">B 5 5</span><br><span class="line">B 10 12</span><br></pre></td></tr></table></figure><p><strong>输出样例#1：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><p><strong>输入样例#2：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">ABBBB</span><br><span class="line">2</span><br><span class="line">B 1 4</span><br><span class="line">B 2 5</span><br></pre></td></tr></table></figure><p><strong>输出样例#2：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>&lt;珂朵莉树&gt;solution-luogu2787_语文1（chin1）- 理理思维</title>
    <link href="http://micromaker.github.io/2019/07/21/solution-luogu2787/"/>
    <id>http://micromaker.github.io/2019/07/21/solution-luogu2787/</id>
    <published>2019-07-21T10:00:18.000Z</published>
    <updated>2019-07-21T10:18:42.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/P2787" target="_blank" rel="noopener">P2787 语文1（chin1）- 理理思维  </a></p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>蒟蒻HansBug在语文考场上，挠了无数次的头，可脑子里还是一片空白。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>考试开始了，可是蒟蒻HansBug脑中还是一片空白。哦不！准确的说是乱七八糟的。现在首要任务就是帮蒟蒻HansBug理理思维。假设HansBug的思维是一长串字符串（字符串中包含且仅包含26个字母），现在的你，有一张神奇的药方，上面依次包含了三种操作：</p><ol><li>获取第x到第y个字符中字母k出现了多少次</li><li>将第x到第y个字符全部赋值为字母k</li><li>将第x到第y个字符按照A-Z的顺序排序</li></ol><p>你欣喜若狂之时，可是他脑细胞和RP已经因为之前过度紧张消耗殆尽，眼看试卷最后还有一篇800字的作文呢，所以这个关键的任务就交给你啦！</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><p><strong>输入格式：</strong></p><p>第一行包含两个整数N、M，分别表示HansBug的思维所包含的字母个数和药方上操作个数。</p><p>第二行包含一个长度为N的字符串，表示HansBug的思维。</p><p>第3-M+2行每行包含一条操作，三种操作格式如下：</p><ol><li>操作1： 1 xi yi ki 表示将第xi到第yi个字符中ki出现的次数输出</li><li>操作2： 2 xi yi ki 表示将第xi到第yi个字符全部替换为ki</li><li>操作3： 3 xi yi 表示将第xi到第yi个字符按照A-Z的顺序排序</li></ol><p><strong>输出格式：</strong></p><p>输出为若干行，每行包含一个整数，依次为所有操作1所得的结果。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入样例#1：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">ABCDABCDCD</span><br><span class="line">1 1 3 A</span><br><span class="line">3 1 5</span><br><span class="line">1 1 3 A</span><br><span class="line">2 1 2 B</span><br><span class="line">1 2 3 B</span><br></pre></td></tr></table></figure><p><strong>输出样例#1：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>操作2是什么？区间赋值，好，珂朵莉树走起</p><p>我们看一下操作1，统计k的出现次数，直接暴力</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_times</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">    reg <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;iterl!=iterr;++iterl)</span><br><span class="line">        <span class="keyword">if</span>(iterl-&gt;val==k)</span><br><span class="line">            res+=iterl-&gt;r-iterl-&gt;l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看一下操作3，排序？暴力取出直接暴力sort</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tree_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg <span class="keyword">int</span> t[<span class="number">27</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">    reg IT itert=iterl;</span><br><span class="line">    <span class="keyword">for</span>(;iterl!=iterr;++iterl)</span><br><span class="line">        t[iterl-&gt;val]+=iterl-&gt;r-iterl-&gt;l+<span class="number">1</span>;</span><br><span class="line">    tr.erase(itert,iterr);</span><br><span class="line">    reg <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(t[i])</span><br><span class="line">            tr.insert(Node(k+l,k+l+t[i]<span class="number">-1</span>,i)),k+=t[i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>好暴力啊</del></p><p>总Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT set<span class="meta-string">&lt;Node&gt;::iterator</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="keyword">int</span> val;</span><br><span class="line">    Node(<span class="keyword">int</span> _l,<span class="keyword">int</span> _r=<span class="number">-1</span>,<span class="keyword">int</span> _val=<span class="number">0</span>):l(_l),r(_r),val(_val)&#123;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;nt) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;nt.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;Node&gt; tr;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    reg <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">        c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">        s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isword</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((c&gt;=<span class="string">'A'</span>&amp;&amp;c&lt;=<span class="string">'Z'</span>)||(c&gt;=<span class="string">'a'</span>&amp;&amp;c&lt;=<span class="string">'z'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!isword(c))</span><br><span class="line">        c=getchar();</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="string">'A'</span>&amp;&amp;c&lt;=<span class="string">'Z'</span>)</span><br><span class="line">        c-=<span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c-=<span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)c+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">char4int</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'A'</span>&lt;=c&amp;&amp;c&lt;=<span class="string">'Z'</span>)</span><br><span class="line">        c-=<span class="string">'A'</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'a'</span>&lt;=c&amp;&amp;c&lt;=<span class="string">'z'</span>)</span><br><span class="line">        c-=<span class="string">'a'</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> IT <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg IT iter=tr.lower_bound(Node(pos));</span><br><span class="line">    <span class="keyword">if</span>(iter!=tr.end()&amp;&amp;iter-&gt;l==pos)</span><br><span class="line">        <span class="keyword">return</span> iter;</span><br><span class="line">    --iter;</span><br><span class="line">    reg <span class="keyword">int</span> nl=iter-&gt;l,nr=iter-&gt;r,nval=iter-&gt;val;</span><br><span class="line">    tr.erase(iter);</span><br><span class="line">    tr.insert(Node(nl,pos<span class="number">-1</span>,nval));</span><br><span class="line">    <span class="keyword">return</span> tr.insert(Node(pos,nr,nval)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">    tr.erase(iterl,iterr);</span><br><span class="line">    tr.insert((Node)&#123;l,r,x&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_times</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">    reg <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;iterl!=iterr;++iterl)</span><br><span class="line">        <span class="keyword">if</span>(iterl-&gt;val==k)</span><br><span class="line">            res+=iterl-&gt;r-iterl-&gt;l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tree_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg <span class="keyword">int</span> t[<span class="number">27</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">    reg IT itert=iterl;</span><br><span class="line">    <span class="keyword">for</span>(;iterl!=iterr;++iterl)</span><br><span class="line">        t[iterl-&gt;val]+=iterl-&gt;r-iterl-&gt;l+<span class="number">1</span>;</span><br><span class="line">    tr.erase(itert,iterr);</span><br><span class="line">    reg <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(t[i])</span><br><span class="line">            tr.insert(Node(k+l,k+l+t[i]<span class="number">-1</span>,i)),k+=t[i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("P2787.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("P2787my.out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;rd(n);rd(m);</span><br><span class="line">    reg <span class="keyword">char</span> lst=getc(),c;</span><br><span class="line">    reg <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        c=getc();</span><br><span class="line">        <span class="keyword">if</span>(c==lst)</span><br><span class="line">            ++cnt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tr.insert(Node(i-cnt,i<span class="number">-1</span>,char4int(lst))),cnt=<span class="number">1</span>,lst=c;</span><br><span class="line">    &#125;</span><br><span class="line">    tr.insert(Node(n-cnt+<span class="number">1</span>,n,char4int(lst)));</span><br><span class="line">    tr.insert(Node(n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    reg <span class="keyword">int</span> opt,x,y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        rd(opt);rd(x);rd(y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c=getc();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,get_times(x,y,char4int(c)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c=getc();</span><br><span class="line">            assign(x,y,char4int(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tree_sort(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不吸氧<code>1405ms</code>，吸氧<code>359ms</code></p><p>直接把线段树锤哭 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Pray For Kyoani</title>
    <link href="http://micromaker.github.io/2019/07/18/prayforkyoani/"/>
    <id>http://micromaker.github.io/2019/07/18/prayforkyoani/</id>
    <published>2019-07-18T15:34:20.000Z</published>
    <updated>2019-08-08T12:31:26.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Pray-For-Kyoani"><a href="#Pray-For-Kyoani" class="headerlink" title="Pray For Kyoani"></a>Pray For Kyoani</h1><p>京都动画第一工作室失火，一场大火带走了他们的热爱与温柔<br>第一工作室70多人几乎全部受伤，其中34人死亡<br>牺牲的是艺术作品，牺牲的是造梦者<br>为原画稿和画师惋惜<br>唯愿逝者安息，生者前行</p><h3 id="京阿尼加油啊！！"><a href="#京阿尼加油啊！！" class="headerlink" title="京阿尼加油啊！！"></a>京阿尼加油啊！！</h3><p><img src="https://s2.ax1x.com/2019/07/19/Zv4akt.jpg" alt=""></p><p><img src="https://s2.ax1x.com/2019/07/19/Zv4kSU.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="ACGN" scheme="http://micromaker.github.io/tags/ACGN/"/>
    
  </entry>
  
  <entry>
    <title>ST-list</title>
    <link href="http://micromaker.github.io/2019/07/16/ST-list/"/>
    <id>http://micromaker.github.io/2019/07/16/ST-list/</id>
    <published>2019-07-16T05:59:58.000Z</published>
    <updated>2019-07-16T05:59:58.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>珂朵莉树的易懂教学</title>
    <link href="http://micromaker.github.io/2019/07/15/chtholly-tree/"/>
    <id>http://micromaker.github.io/2019/07/15/chtholly-tree/</id>
    <published>2019-07-15T12:51:15.000Z</published>
    <updated>2019-07-16T04:24:03.595Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0xff：前置芝士"><a href="#0xff：前置芝士" class="headerlink" title="0xff：前置芝士"></a>0xff：前置芝士</h3><p>在阅读本文前，请先了解并会熟练掌握：set、set的迭代器、结构体struct的相关操作，</p><p>不会的先去了解并使用熟练后再来看本文</p><hr><h3 id="一、什么是珂朵莉树？"><a href="#一、什么是珂朵莉树？" class="headerlink" title="一、什么是珂朵莉树？"></a>一、什么是珂朵莉树？</h3><p>珂朵莉树是一种数据结构，又称Old Driver Tree(ODT老司机树)，是一种基于set的暴力数据结构，等一下会讲解。</p><h3 id="二、为什么叫珂朵莉树？"><a href="#二、为什么叫珂朵莉树？" class="headerlink" title="二、为什么叫珂朵莉树？"></a>二、为什么叫珂朵莉树？</h3><p>这个数据结构诞生于一道cf毒瘤题<a href="http://codeforces.com/problemset/problem/896/C" target="_blank" rel="noopener">CF896C Willem, Chtholly and Seniorious</a>，命名为珂朵莉树的原因很明显，题目名字翻译过来是威廉，珂朵莉和瑟尼欧里斯，然后题目中附带了一张动漫中的截图（威廉帮珂朵莉调整瑟尼欧里斯），这题的标程是线段树，但是出题人ODT在题解里写到了这个新数据结构，命名为<code>Chtholly Tree</code>，据说能艹翻标程</p><p>珂朵莉·诺塔·瑟尼欧里斯出自TV动画<a href="[https://baike.baidu.com/item/%E6%9C%AB%E6%97%A5%E6%97%B6%E5%9C%A8%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E6%B2%A1%E6%9C%89%E7%A9%BA%EF%BC%9F%E5%8F%AF%E4%BB%A5%E6%9D%A5%E6%8B%AF%E6%95%91%E5%90%97%EF%BC%9F/20362924#viewPageContent](https://baike.baidu.com/item/末日时在做什么？有没有空？可以来拯救吗？/20362924#viewPageContent">末日时在做什么？有没有空？可以来拯救吗？</a>)，珂学家指的就是珂朵莉厨（没错我就是）</p><p>这就是珂朵莉——&gt; <img src="https://s2.ax1x.com/2019/07/15/ZThKeg.png" alt=""></p><p><img src="https://s2.ax1x.com/2019/07/15/ZToJN4.jpg" alt=""></p><p> 中国珂学院：<a href="https://www.chtholly.ac.cn/" target="_blank" rel="noopener">https://www.chtholly.ac.cn/</a></p><p><del><strong>好回归正题：</strong></del></p><h3 id="三、为什么要用珂朵莉树？"><a href="#三、为什么要用珂朵莉树？" class="headerlink" title="三、为什么要用珂朵莉树？"></a>三、为什么要用珂朵莉树？</h3><p>珂朵莉树的关键操作在于它可以把一段区间赋值成同一个数x，</p><p>并且数据要随机，因为它本身就很玄学</p><h3 id="四、怎么写珂朵莉树呢？"><a href="#四、怎么写珂朵莉树呢？" class="headerlink" title="四、怎么写珂朵莉树呢？"></a>四、怎么写珂朵莉树呢？</h3><h4 id="1-节点初始化"><a href="#1-节点初始化" class="headerlink" title="1.节点初始化"></a>1.节点初始化</h4><p>一棵树肯定有节点啊，这里用一个<code>struct</code>存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> val;</span><br><span class="line">Node(<span class="keyword">int</span> _l,<span class="keyword">int</span> _r=<span class="number">-1</span>,<span class="keyword">int</span> _val=<span class="number">0</span>):l(_l),r(_r),val(_val)&#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;nt) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> l&lt;nt.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们逐行解答：</p><p>首先，各个变量的意思：这个节点表示从<code>l</code>到<code>r</code>这个区间内的数的值都是<code>val</code></p><p>为什么要<code>mutable</code>？<code>mutable</code>与从<code>const</code>相对，因为这个<code>val</code>在<code>set</code>中是要更改的，不开这个会CE</p><p>然后<code>Node(int , , ,)</code>这个就是一种比较标准的给结构体赋值的方式，当然直接<code>(Node){x,y,z}</code>也可以</p><p>接下来是重载小于号，意味着这个<code>set</code>的排序按照l从小到大排</p><h4 id="2-核心操作之一：split"><a href="#2-核心操作之一：split" class="headerlink" title="2.核心操作之一：split"></a>2.核心操作之一：split</h4><p><code>split(pos)</code>操作是将原来含有<code>pos</code>位置的节点分成两部分：$[l,pos-1]$和$[pos,r]$</p><p>举个栗子理解一下：这里用<code>(l,r,val)</code>来表示一个节点</p><p>设原节点按照<code>set</code>的排序顺序为<code>(1,2,1), (3,6,2), (7,7,3)</code></p><p>那么<code>split(5)</code>操作后的节点序列就变为<code>(1,2,1), (3,4,2), (5,6,2), (7,7,3)</code></p><p><del>这个看上去非常暴力对不对</del></p><p>上Code然后逐行分析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT set<span class="meta-string">&lt;Node&gt;::iterator</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> IT <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg IT iter=tr.lower_bound(Node(pos));</span><br><span class="line"><span class="keyword">if</span>(iter!=tr.end()&amp;&amp;iter-&gt;l==pos)</span><br><span class="line"><span class="keyword">return</span> iter;</span><br><span class="line">--iter;</span><br><span class="line">reg <span class="keyword">int</span> nl=iter-&gt;l,nr=iter-&gt;r,nval=iter-&gt;val;</span><br><span class="line">tr.erase(iter);</span><br><span class="line">tr.insert((Node)&#123;nl,pos<span class="number">-1</span>,nval&#125;);</span><br><span class="line"><span class="keyword">return</span> tr.insert((Node)&#123;pos,nr,nval&#125;).first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏定义不说，手打那么多迭代器会死人</p><p>函数定义这行，为什么有返回值？这里返回的是代表$[pos,r]$区间的节点的迭代器，方便于其他操作</p><p>行4，在珂朵莉树中找到第一个<code>l</code>大于等于<code>pos</code>的节点，简单来说就是找到包含<code>pos</code>下标(比如<code>(3,6,x)</code>这个节点就包含了下标<code>3~6</code>)的节点</p><blockquote><p>这里切记，在set里进行lower_bound之类的操作<strong>千万不能用lower_bound(tr.begin(),tr.end(),x);</strong>这样的写法！正确的写法是<strong>tr.lower_bound(x);</strong>，不要以为这只是什么码风问题，错误写法的复杂度是$O(nlog^2n)$而正确的写法复杂度只有$O(logn)$，因为错误写法是按照正常数组的遍历方法去二分，而set是不支持随机访问的，然后迭代器的++和—操作又是$O(logn)$的，所以总的错误复杂度为$O(n)×O(logn)×O(logn) = O(nlog^2n)$，这和正确写法的$O(logn)$可是有着天壤之别</p></blockquote><p>如果迭代器不等于珂朵莉树的<code>end()</code>并且找到的这个节点（迭代器）的l恰好为<code>pos</code>，这代表什么？我们知道，“上一个”节点的<code>r</code>一定是小于“下一个”节点的<code>l</code>的，于是，既然已经找到了$[a,b], [c,d]$中的<code>c</code>，那么直接返回这个迭代器就好了，其他什么多别做</p><p>如果不呢？那么找到的这个节点的<code>l</code>一定大于<code>pos</code>的(<code>l</code>大于等于<code>pos</code>，<code>l</code>不等于<code>pos</code>当然大于<code>pos</code>)，那么要找的那个节点一定在“上一个”节点那里对不对？于是，<code>--iter</code>来到上一个节点</p><p><strong>先</strong>将这所找到的这个节点的数值赋值给<code>nl</code>，<code>nr</code>，<code>nval</code>，<strong>然后</strong>原来的<code>iter</code>就可以删除了(因为是迭代器，先后顺序不能反)，插入两个节点：<code>(nl,pos-1,nval)</code>和<code>(pos,nr,nval)</code>，这就是我们所想要的<code>split</code>操作</p><p>最后那个<code>return</code>是什么鬼？</p><p>那个是一个奇怪的语法，你可以理解为：1.插入节点<code>(pos,nr,nval)</code>；2.返回节点<code>(pos,nr,nval)</code>的迭代器</p><h4 id="3-核心操作之一：assign"><a href="#3-核心操作之一：assign" class="headerlink" title="3.核心操作之一：assign"></a>3.核心操作之一：assign</h4><p>只有<code>split</code>操作怎么行？把<code>set</code>的节点数不断增多复杂度还不是爆炸？？</p><p>那么这时候就要用<code>assign</code>操作减小节点数量，降低<code>set</code>的规模</p><p><strong>注意：这个操作是珂朵莉树玄学复杂度的保证，如果题目要求不包含这个操作，那么不可用珂朵莉树</strong></p><p><code>assign(l,r,val)</code>的意思就是把原来数组下标$[l,r]$的地方在珂朵莉树中全部赋值为<code>val</code></p><p>怎么写呢？特别暴力。。</p><p>直接上Code，逐行讲解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">tr.erase(iterl,iterr);</span><br><span class="line">tr.insert(Node(l,r,val));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们要把$l-1,l$ “切”开，$r,r+1$ “切”开，切就用到了split操作</p><p>然后用两个迭代器存下<code>split</code>操作的返回值</p><p><code>iterl</code>对应的是<code>(l,...,...)</code>的节点，<code>iterr</code>对应的是<code>(r+1,...,...)</code>的节点</p><blockquote><p>这里注意，<strong>必须先split(r+1)再split(l)</strong>，因为在split(r+1)的时候可能会让split(l)的迭代器失效，<strong>这时候会导致程序RE</strong></p></blockquote><p>然后我们先要把$[l,r]$这段的所有节点删除掉</p><p><code>erase</code>有一种用法为<code>void erase(iterator fr,iterator se)</code>，作用是把$[fr,se)$区间删除(注意左闭右开)，那么这里只需要<code>erase(iterl,iterr)</code>就可以删除$[l,r]$区间了(对应<code>erase</code>的操作其实是<code>erase(l,r+1)</code>)</p><p>给张图理解一下：</p><p><img src="https://s2.ax1x.com/2019/07/15/ZTzY5t.png" alt=""></p><p>在同一框框内的就是同一个节点，框框内的数字就是val</p><p>这段操作对应的是<code>assign(5,10,5)</code></p><p>第一步，<code>split</code>，棕色的线就是<code>split</code>的痕迹</p><p>第二步，删除$[l,r]$区间</p><p>第三步，<code>insert</code>插入新的$[l,r]$区间</p><p><strong>其他操作(区间加什么的)很暴力而且很简单，我会在cf896c的题解中写道</strong></p><p>大概就是这样子，Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">    <span class="keyword">for</span>(;iterl!=iterr;++iterl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//iterl-&gt;val+=...; </span></span><br><span class="line">        <span class="comment">// just do it!</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、复杂度"><a href="#五、复杂度" class="headerlink" title="五、复杂度"></a>五、复杂度</h3><p><strong>珂朵莉树是用来骗分的一种暴力数据结构！</strong></p><p><strong>珂朵莉树是用来骗分的一种暴力数据结构！！</strong></p><p><strong>珂朵莉树是用来骗分的一种暴力数据结构！！！</strong></p><p>这里摘用了<a href="https://me.csdn.net/niiick" target="_blank" rel="noopener">niiick</a>巨佬的<a href="https://blog.csdn.net/niiick/article/details/83062256" target="_blank" rel="noopener">博客</a></p><p>在<strong>数据纯随机</strong>的情况下，可以证明每次<code>assign</code>的<strong>区间长度期望</strong>为<code>N/3</code></p><p>于是<code>set</code>的规模迅速下降，最后接近$O(qlogn)$的<del>玄学非正常</del>复杂度</p><p>注：<code>q</code>为操作询问数目，<code>n</code>为原数组大小</p><p>各位巨佬也可以去看<a href="http://codeforces.com/blog/entry/56135?#comment-398940" target="_blank" rel="noopener">cf上面的证明贴</a></p><h3 id="六、总代码"><a href="#六、总代码" class="headerlink" title="六、总代码"></a>六、总代码</h3><p><strong>注意插入完所有n个节点以后还要做一次tr.insert(Node(n+1,n+1,0))操作</strong></p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT set<span class="meta-string">&lt;Node&gt;::iterator</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> val;</span><br><span class="line">Node(<span class="keyword">int</span> _l,<span class="keyword">int</span> _r=<span class="number">-1</span>,<span class="keyword">int</span> _val=<span class="number">0</span>):l(_l),r(_r),val(_val)&#123;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;nt) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> l&lt;nt.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;Node&gt; tr;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> IT <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg IT iter=tr.lower_bound(Node(pos));</span><br><span class="line"><span class="keyword">if</span>(iter!=tr.end()&amp;&amp;iter-&gt;l==pos)</span><br><span class="line"><span class="keyword">return</span> iter;</span><br><span class="line">--iter;</span><br><span class="line">reg <span class="keyword">int</span> nl=iter-&gt;l,nr=iter-&gt;r,nval=iter-&gt;val;</span><br><span class="line">tr.erase(iter);</span><br><span class="line">tr.insert((Node)&#123;nl,pos<span class="number">-1</span>,nval&#125;);</span><br><span class="line"><span class="keyword">return</span> tr.insert((Node)&#123;pos,nr,nval&#125;).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line">tr.erase(iterl,iterr);</span><br><span class="line">tr.insert(Node(l,r,val));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addx</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg IT iterr=split(r+<span class="number">1</span>),iterl=split(l);</span><br><span class="line"><span class="keyword">for</span>(;iterl!=iterr;++iterl)</span><br><span class="line">iterl-&gt;val+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rd(n);rd(m);</span><br><span class="line">reg <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(x),tr.insert(Node(i,i,x));<span class="comment">//暴力插点</span></span><br><span class="line">tr.insert(Node(n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//just do it</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>$End$~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithms" scheme="http://micromaker.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://micromaker.github.io/2019/07/14/anime-watchs/"/>
    <id>http://micromaker.github.io/2019/07/14/anime-watchs/</id>
    <published>2019-07-14T13:04:02.316Z</published>
    <updated>2019-10-31T13:13:05.119Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;01分数规划&gt;&lt;最小生成树&gt;solution-poj2728_Desert King</title>
    <link href="http://micromaker.github.io/2019/07/14/solution-poj2728/"/>
    <id>http://micromaker.github.io/2019/07/14/solution-poj2728/</id>
    <published>2019-07-14T03:39:19.000Z</published>
    <updated>2019-07-14T03:43:24.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>&lt;状压DP&gt;solution-hdu5691_Sitting in Line</title>
    <link href="http://micromaker.github.io/2019/07/12/solution-hdu5691/"/>
    <id>http://micromaker.github.io/2019/07/12/solution-hdu5691/</id>
    <published>2019-07-12T06:43:16.000Z</published>
    <updated>2019-07-14T14:26:44.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5691" target="_blank" rel="noopener">Sitting in Line</a></p><p>Problem Description</p><p>度度熊是他同时代中最伟大的数学家，一切数字都要听命于他。现在，又到了度度熊和他的数字仆人们玩排排坐游戏的时候了。游戏的规则十分简单，参与游戏的N个整数将会做成一排，他们将通过不断交换自己的位置，最终达到所有相邻两数乘积的和最大的目的，参与游戏的数字有整数也有负数。度度熊为了在他的数字仆人面前展现他的权威，他规定某些数字只能在坐固定的位置上，没有被度度熊限制的数字则可以自由地交换位置。</p><p>Input</p><p>第一行一个整数T，表示T组数据。<br>每组测试数据将以如下格式从标准输入读入：</p><p>N</p><p>a1p1</p><p>a2p2</p><p>: </p><p>aNPN</p><p>第一行，整数 N(1≤N≤16)，代表参与游戏的整数的个数。</p><p>从第二行到第 (N+1) 行，每行两个整数，ai(−10000≤ai≤10000)、pi(pi=−1 或 0≤pi&lt;N)，以空格分割。ai代表参与游戏的数字的值，pi代表度度熊为该数字指定的位置，如果pi=−1，代表该数字的位置不被限制。度度熊保证不会为两个数字指定相同的位置。</p><p>Output</p><p>第一行输出：”Case #i:”。i代表第i组测试数据。</p><p>第二行输出数字重新排列后最大的所有相邻两数乘积的和，即max{a1⋅a2+a2⋅a3+……+aN−1⋅aN}。</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">6</span><br><span class="line">-1 0</span><br><span class="line">2 1</span><br><span class="line">-3 2</span><br><span class="line">4 3</span><br><span class="line">-5 4</span><br><span class="line">6 5</span><br><span class="line">5</span><br><span class="line">40 -1</span><br><span class="line">50 -1</span><br><span class="line">30 -1</span><br><span class="line">20 -1</span><br><span class="line">10 -1</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1:</span><br><span class="line">-70</span><br><span class="line">Case #2:</span><br><span class="line">4600</span><br></pre></td></tr></table></figure><p>首先，我们把第k个数选不选这n个状态压缩成i，然后发现每次转移都需要当前这个数和上一个数，当前这个数我们直接可以枚举，上一个数我们可以多开一维来记录</p><p>于是，$f[i][j]$表示在选了i状态的数字下最后一个数字是a[j]时的最大和</p><p>转移方程：</p><p>$f[i|(1&lt;&lt;k)][k] = max(f[i][j]+a[j]*a[k])$，</p><p>这题的转移条件是一个很麻烦的地方，可以说比转移方程还难弄</p><p>首先分析初始化，当$p[k] == 0$的时候，说明此时第k个数只能放0号位，于是$f[i|(1&lt;&lt;k)][k] = 0$</p><p>当$p[k] == -1$的时候呢？说明第k个数什么位置都能放，当然能放0号位，于是一样$f[i|(1&lt;&lt;k)][k] = 0$</p><p>然后分析转移过程，$f[i|(1&lt;&lt;k)][k] = max(f[i][j]+a[j]*a[k])$</p><p>转移的时候总要从有选择过a[j]状态的i转移过来吧，所以转移条件之一：$i\&amp;(1&lt;&lt;j) == 1$</p><p>还有转移的时候</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra的优化</title>
    <link href="http://micromaker.github.io/2019/07/11/optimize-in-dijkstra/"/>
    <id>http://micromaker.github.io/2019/07/11/optimize-in-dijkstra/</id>
    <published>2019-07-11T14:40:35.000Z</published>
    <updated>2019-07-19T14:47:41.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>In the begining:</p><p><strong>本文中的所有源代码我都会开放下载，文章底部会有链接可以统一下载所有代码</strong></p><p>这篇文章的作者很蔡，<strong>如果出现问题可以通过QQ（1632466445）联系我awa</strong></p><p><strong>本文中的图用$G = (N,M)$表示，G为有向图，N为点数，M为边数</strong></p><p><strong>本文中稠密图的定义为接近完全图（$M \approx N(N-1)/2$ ），稀疏图的定义为（$M \approx 4N$)</strong></p><p><strong>本文中所有代码均采用register和inline优化，均使用printf输出和同一种快读读入</strong></p><p><strong>本文中所有评测均不开启任何优化开关</strong></p><p><strong>一些奇怪的语法解释：dis[x]=从起始点到点x的最短距离</strong></p><p>首先我们先来理解一下Dijkstra算法，Dijkstra是用来求单源最短路径问题的一种算法</p><p>我们称已经用dis[x]更新完所有与它直接相连的点为蓝点，也就是已扩展点，</p><p>没有更新或没有确定dis[x]的点就叫白点，也就是未扩展点</p><p>Dijkstra的思想就是，从dis[x]最小的白点去更新那些与它直接相连的白点，然后把这个白点变为蓝点，因为从一个目前已知的白点出发，更新那些与它相邻的白点，那些白点的距离一定是最短距离，不理解的话，可以自行打一下模板，这篇文章主要讲的是优化awa</p><p>那么一个普通的Dijkstra模板（邻接矩阵）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">5001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> G[MaxN][MaxN],dis[MaxN];</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(dis+<span class="number">1</span>,dis+n+<span class="number">1</span>,inf);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> u=s;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> minn=inf;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">minn=dis[j];</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;G[u][j]!=<span class="number">-1</span>)</span><br><span class="line">dis[j]=min(dis[j],dis[u]+G[u][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> s,u,v,w;</span><br><span class="line">rd(n);rd(m);rd(s);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">G[i][j]=inf;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">G[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">rd(u);rd(v);rd(w);</span><br><span class="line">G[u][v]=min(G[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(s);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,dis[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.org/problemnew/show/P3371" target="_blank" rel="noopener">洛谷最短路弱化版P3371</a> $(N&lt;=1000$ $ M &lt;= 100000)$跑出来平均26ms</p><p>算法复杂度$O(N^2)$但是空间复杂度也是$N^2$，在N变大时空间会先爆，所以可以用邻接链表来优化</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">10001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM=<span class="number">500001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt,to,w;</span><br><span class="line">&#125;E[MaxM];</span><br><span class="line"><span class="keyword">int</span> dis[MaxN],hd[MaxN];</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN];</span><br><span class="line"><span class="keyword">int</span> n,m,en;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++en;</span><br><span class="line">E[en].nxt=hd[u];</span><br><span class="line">E[en].to=v;</span><br><span class="line">E[en].w=w;</span><br><span class="line">hd[u]=en;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(dis+<span class="number">1</span>,dis+n+<span class="number">1</span>,inf);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> u=s;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> minn=inf;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">minn=dis[j];</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=hd[u];~j;j=E[j].nxt)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=E[j].to;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">dis[v]=min(dis[v],dis[u]+E[j].w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(hd,<span class="number">-1</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line">reg <span class="keyword">int</span> s,u,v,w;</span><br><span class="line">rd(n);rd(m);rd(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">rd(u);rd(v);rd(w);</span><br><span class="line">adde(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(s);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,dis[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样空间复杂度就被优化到$O(3N)$，时间复杂度$O(N^2)$可以卡过<a href="https://www.luogu.org/problemnew/show/P3371" target="_blank" rel="noopener">洛谷最短路弱化版P3371</a> 的100%数据范围$(N&lt;=10000$ $M&lt;=500000)$，平均370ms</p><p>邻接矩阵主要适用于稠密图，邻接链表主要适用于稀疏图</p><p>优化完了？<del>优化完了</del></p><p>我们好像并没有把时间复杂度降下来awa</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;minn)</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">minn=dis[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这一段代码，这是用来寻找目前dis值最小的点，复杂度$O(N)$</p><p>我们好像可以用堆之类的数据结构来优化</p><p>我们用$STL$堆可以将复杂度降到$O(Mlog_2M)$</p><p>因为需要用到优化的最短路的题目点数一般很大，所以只能用邻接链表存</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">100001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM=<span class="number">200001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,dis;</span><br><span class="line">&#125;E[MaxM];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;nt) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nt.d&lt;d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[MaxN],hd[MaxN];</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN];</span><br><span class="line"><span class="keyword">int</span> n,m,en;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++en;</span><br><span class="line">    E[en].nxt=hd[u];</span><br><span class="line">    E[en].to=v;</span><br><span class="line">    E[en].dis=w;</span><br><span class="line">    hd[u]=en;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;Node&gt; Q;</span><br><span class="line">    fill(dis+<span class="number">1</span>,dis+n+<span class="number">1</span>,inf);</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    Q.push((Node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        reg Node now=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        reg <span class="keyword">int</span> u=now.u;</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(reg <span class="keyword">int</span> i=hd[u];~i;i=E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            reg <span class="keyword">int</span> v=E[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+E[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+E[i].dis;</span><br><span class="line">                Q.push((Node)&#123;v,dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg <span class="keyword">int</span> u,v,w,s;</span><br><span class="line">    rd(n);rd(m);rd(s);</span><br><span class="line">    <span class="built_in">memset</span>(hd,<span class="number">-1</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">    rd(u);rd(v);rd(w);</span><br><span class="line">    adde(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(s);</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来分析一下复杂度，为什么不是$O(NlogN)$？</p><p>首先我们来看一下这个复杂度怎么来的，先来看后面的M，因为每条边的其中一个点都会被入堆一次，所以每次push操作的复杂度就是$O(logM)$</p><p>那么为什么while循环要M次呢，因为push进去了M个元素当然要循环M次把它们全部pop出来啊</p><p>在<a href="https://www.luogu.org/problemnew/show/P4779" target="_blank" rel="noopener">洛谷单源最短路径标准版</a>中$(N&lt;=100000$ $M&lt;=200000)$中跑到了平均139ms</p><p><del>本文结束</del></p><p>我们知道，STL的堆</p><p>平均45ms</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">100001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM=<span class="number">200001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,dis;</span><br><span class="line">&#125;E[MaxM];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;nt) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nt.d&lt;d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[MaxN],hd[MaxN];</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN];</span><br><span class="line"><span class="keyword">int</span> n,m,en;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++en;</span><br><span class="line">    E[en].nxt=hd[u];</span><br><span class="line">    E[en].to=v;</span><br><span class="line">    E[en].dis=w;</span><br><span class="line">    hd[u]=en;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;Node&gt; Q;</span><br><span class="line">    fill(dis+<span class="number">1</span>,dis+n+<span class="number">1</span>,inf);</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    Q.push((Node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        reg Node now=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        reg <span class="keyword">int</span> u=now.u;</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(reg <span class="keyword">int</span> i=hd[u];~i;i=E[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            reg <span class="keyword">int</span> v=E[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+E[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+E[i].dis;</span><br><span class="line">                Q.push((Node)&#123;v,dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reg <span class="keyword">int</span> u,v,w,s;</span><br><span class="line">    rd(n);rd(m);rd(s);</span><br><span class="line">    <span class="built_in">memset</span>(hd,<span class="number">-1</span>,<span class="keyword">sizeof</span> hd);</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">    rd(u);rd(v);rd(w);</span><br><span class="line">    adde(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(s);</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithms" scheme="http://micromaker.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>&lt;状压DP&gt;solution-poj3311_Hie with the Pie</title>
    <link href="http://micromaker.github.io/2019/07/11/solution-poj3311/"/>
    <id>http://micromaker.github.io/2019/07/11/solution-poj3311/</id>
    <published>2019-07-11T14:39:44.000Z</published>
    <updated>2019-07-14T12:25:07.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://poj.org/problem?id=3311" target="_blank" rel="noopener">Hie with the Pie</a></p><p>Description</p><p>The Pizazz Pizzeria prides itself in delivering pizzas to its customers as fast as possible. Unfortunately, due to cutbacks, they can afford to hire only one driver to do the deliveries. He will wait for 1 or more (up to 10) orders to be processed before he starts any deliveries. Needless to say, he would like to take the shortest route in delivering these goodies and returning to the pizzeria, even if it means passing the same location(s) or the pizzeria more than once on the way. He has commissioned you to write a program to help him.</p><p>Input</p><p>Input will consist of multiple test cases. The first line will contain a single integer <em>n</em> indicating the number of orders to deliver, where 1 ≤ <em>n</em> ≤ 10. After this will be <em>n</em> + 1 lines each containing <em>n</em> + 1 integers indicating the times to travel between the pizzeria (numbered 0) and the <em>n</em> locations (numbers 1 to <em>n</em>). The <em>j</em>th value on the <em>i</em>th line indicates the time to go directly from location <em>i</em> to location <em>j</em> without visiting any other locations along the way. Note that there may be quicker ways to go from <em>i</em> to <em>j</em> via other locations, due to different speed limits, traffic lights, etc. Also, the time values may not be symmetric, i.e., the time to go directly from location <em>i</em> to <em>j</em> may not be the same as the time to go directly from location <em>j</em> to <em>i</em>. An input value of <em>n</em> = 0 will terminate input.</p><p>Output</p><p>For each test case, you should output a single number indicating the minimum time to deliver all of the pizzas and return to the pizzeria.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 1 10 10</span><br><span class="line">1 0 1 2</span><br><span class="line">10 1 0 10</span><br><span class="line">10 2 10 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><p>人话：输入一个数n，现在有n个地方（标号1到n）要从标号为0的地方出去，经过所有的地方之后回来，求最短的时间，输入(n+1)*(n+1)的矩阵表示每两点之间到达所需要的时间</p><p>首先，先把每两个点之间的最短路求出来，使用floyd搞定</p><p>然后开始状压dp</p><p>我们把当前去过哪些点进行状压，i二进制表示从左到右第k位表示第k个点是否访问过</p><p>那么我们就可以把dp数组搞出来了，$f[i][j]$表示在已访问i状态这么多点的情况下，重点是j的最短路</p><p>状态转移方程就是：</p><p>$f[i|(1&lt;&lt;k)][k] = f[i][j]+dis[j][k]$</p><p>还有，起始点状态记得初始化</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[(<span class="number">1</span>&lt;&lt;MaxN)+<span class="number">1</span>][MaxN];</span><br><span class="line"><span class="keyword">int</span> G[MaxN][MaxN],dis[MaxN][MaxN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;++j)</span><br><span class="line">rd(G[i][j]),dis[i][j]=G[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;++k)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) <span class="keyword">if</span>(k!=i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;++j) <span class="keyword">if</span>(i!=j)</span><br><span class="line">dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n+<span class="number">1</span>));++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;++j) <span class="keyword">if</span>(f[i][j]!=inf)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;++k)</span><br><span class="line"><span class="keyword">if</span>(j!=k)</span><br><span class="line">f[i|(<span class="number">1</span>&lt;&lt;k)][k]=min(f[i|(<span class="number">1</span>&lt;&lt;k)][k],f[i][j]+dis[j][k]);</span><br><span class="line">&#125;</span><br><span class="line">reg <span class="keyword">int</span> u=(<span class="number">1</span>&lt;&lt;(n+<span class="number">1</span>))<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[u][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>&lt;背包&gt;solution-poj1742_Coins</title>
    <link href="http://micromaker.github.io/2019/07/11/solution-poj1742/"/>
    <id>http://micromaker.github.io/2019/07/11/solution-poj1742/</id>
    <published>2019-07-11T11:52:12.000Z</published>
    <updated>2019-07-12T06:46:14.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://vjudge.net/problem/POJ-1742" target="_blank" rel="noopener">POJ1742 - Coins</a></p><p>People in Silverland use coins.They have coins of value A1,A2,A3…An Silverland dollar.One day Tony opened his money-box and found there were some coins.He decided to buy a very nice watch in a nearby shop. He wanted to pay the exact price(without change) and he known the price would not more than m.But he didn’t know the exact price of the watch.<br>You are to write a program which reads n,m,A1,A2,A3…An and C1,C2,C3…Cn corresponding to the number of Tony’s coins of value A1,A2,A3…An then calculate how many prices(form 1 to m) Tony can pay use these coins. </p><p>Input</p><p>The input contains several test cases. The first line of each test case contains two integers n(1&lt;=n&lt;=100),m(m&lt;=100000).The second line contains 2n integers, denoting A1,A2,A3…An,C1,C2,C3…Cn (1&lt;=Ai&lt;=100000,1&lt;=Ci&lt;=1000). The last test case is followed by two zeros.</p><p>Output</p><p>For each test case output the answer on a single line.</p><p>Sample Input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 10</span><br><span class="line">1 2 4 2 1 1</span><br><span class="line">2 5</span><br><span class="line">1 4 2 1</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>先给人话：给你n种硬币，面值为ai，每种有bi个，问你能凑成1~m中多少种面值，</p><p>这题你看多重背包，直接二进制分组就好了，但是我太蔡了所以当时没想到 ，等一下再讲，</p><p>先说说我的做法：</p><p>首先，$f[i][j]$走起</p><p>$f[i][j]$表示前i种硬币凑成j元时第i种硬币剩余的个数，然后列出方程</p><p>首先用$f[i][j]=-1$表示前i种硬币无论如何都不能凑出j元</p><p>$f[i][j] = B[i]$ $(f[i-1][j]!=-1)$ ，解释：在前i-1种硬币能凑出j元的时候，那还要第i种硬币干嘛？直接赋值成第i种硬币的数量</p><p>$f[i][j] = f[i-1][j-A[i]]-1$ $(j&gt;=A[i])$，解释：</p><p>转移之前的状态时前i-1个硬币组成了j-A[i]元所花的第i-1个硬币的方案数，</p><p>转移时，花了第i种硬币1个以凑成j元，为什么要-1呢？因为不是花了1个硬币么///</p><p>其他情况，$f[i][j] = -1$</p><p>好，于是上代码（部分）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i<span class="number">-1</span>][j]&gt;=<span class="number">0</span>)</span><br><span class="line">f[i][j]=B[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&lt;A[i]||(j&gt;=A[i]&amp;&amp;f[i<span class="number">-1</span>][j-A[i]]&lt;=<span class="number">0</span>))</span><br><span class="line">f[i][j]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=A[i])</span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j-A[i]]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的边界条件可能有点问题，各位大佬见谅啊<del>（反正这不是正解）</del></p><p><del>好，Submit</del></p><p><strong>Memory Limit Exceeded</strong>，标准结局</p><p>考虑优化，</p><p>咦，你看<del>这个f又大又圆</del>这个$f[i][j]$会从$f[i-1][…]$转移过来，还记得背包里面我们怎么把二维转成一维么，直接滚掉就可以了，于是，状态转移方程：</p><p>$f[j] = B[i] $ $(f[j] != -1)$</p><p>$f[j]=f[j-A[i]]-1$ $(j&gt;=A[i])$</p><p>其他情况，$f[j] = -1$</p><p>注意，$f[0]=0$</p><p>然后计算一下时间复杂度，</p><p>$O(nm)$，最坏的时候1.5亿，</p><p>再看看源题库，poj，<del>笑容逐渐消失</del></p><p>但是时限给了3秒啊！刚好能卡过去！！！</p><p>好，上Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">101</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM=<span class="number">100001</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[MaxM];</span><br><span class="line"><span class="keyword">int</span> w[MaxN],st[MaxN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(w[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(st[i]); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[j]&gt;=<span class="number">0</span>)</span><br><span class="line">f[j]=st[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">f[j]=f[j-w[i]]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="keyword">if</span>(f[i]&gt;=<span class="number">0</span>)</span><br><span class="line">++ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n&amp;&amp;m)</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束了？</p><p><del>结束了。</del>还没完呢</p><p>这里提一下二进制分组的做法，</p><p>首先，我们要知道二进制分组是什么，</p><p>假设有物品的数量为9，分成9组数量为1的物品这样复杂度肯定不优秀，怎么办呢？二进制分组</p><p>把数量按照二进制分组：1、2、4，最后还剩下一个2，</p><p>这样分组既可以想分成9组一样组合枚举出所有的情况，又使复杂度降成了log，这十分的香</p><p><del>“可我没听懂你在说什么”</del></p><p>假设这9个物品每个物品体积为3，价值为4，那么经过二进制分组后的物品体积和价值应为：</p><p>体积： 3， 6，12， 6</p><p>价值： 4， 8，16， 8</p><p><del>“那怎么实现呢”</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    read(N);read(w);read(c);</span><br><span class="line">    <span class="keyword">while</span>(k&lt;=N)</span><br><span class="line">    &#123;</span><br><span class="line">        ++n;</span><br><span class="line">        W[n]=w*k;</span><br><span class="line">        C[n]=c*k;</span><br><span class="line">        k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N)</span><br><span class="line">    &#123;</span><br><span class="line">        ++n;</span><br><span class="line">        W[n]=w*N;</span><br><span class="line">        C[n]=c*N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是这个样子</p><p>具体的代码各位大佬自己上网搜</p><p>因为我实在是太蔡了awa</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>状压DP</title>
    <link href="http://micromaker.github.io/2019/07/11/state-compression-dp/"/>
    <id>http://micromaker.github.io/2019/07/11/state-compression-dp/</id>
    <published>2019-07-11T07:38:33.000Z</published>
    <updated>2019-07-11T08:47:06.176Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天学了个状压DP，<del>感觉就是bitset啥的瞎搞搞</del></p><ul><li>什么题可以用状压DP？</li></ul><p>只要你设计的状态是XXX可不可行，反正状态能用bool表示的基本能上状压DP</p><p>状压，就是状态压缩，一个int含有32个bit，每个bit可以存一个0/1，那么一个int就可以存32个状态，而且这种储存方法在转移的时候可以以更快的速度转移，可以在你的$O$里乘上一个$\frac{1}{32}$</p><ul><li><p>状压DP转移时的一些操作：</p></li><li><p>与 &amp;：相同为1，不同为0</p></li><li><p>或 |：有1为1，全0为0</p></li><li><p>取反~：1变0，0变1</p></li><li><p>异或 ^：不同为1，相同为0</p></li><li><p>移位 &lt;&lt;： *2\^x，&gt;&gt;：除2\^x，向下取整</p></li><li><p>优先级：直接加()就好了，括号优先级最高</p></li><li><p>产生一个数p，它的二进制从低到高是n个1，其余为零：</p></li></ul><p>$p=(1&lt;&lt;n)-1$ 解答：将1左移n位得到一个二进制数（1后面n个0），然后减1获得这个数p</p><ul><li>得到x的二进制第i位的值</li></ul><p>$(x&gt;&gt;i)\&amp;1$ 解答：x右移i位把原来x的第i位移到最低位，然后和1进行与操作</p><ul><li>将x的二进制第i位改为1</li></ul><p>$x|=(1&lt;&lt;i)$ 解答：产生一个数（1后面i个0），然后把它和x进行或操作，就把x的第i位置1</p><ul><li>将x的二进制第i位取反</li></ul><p>$x^=(1&lt;&lt;i)$ 解答：产生一个数（1后面i个0），然后把它和x进行异或操作，就把x的第i位取反</p><ul><li>x的二进制表示中最低位的1所对应的值</li></ul><p>这个就是树状数组中常用的lowbit操作，$lowbit(x) = x\&amp;(-x)$</p><p> 其实我们还可以用bitset，这个更方便，各位巨佬可以去看<a href="https://www.luogu.org/blog/fusu2333/fu-su-di-bitset-qian-tan" target="_blank" rel="noopener">扶苏的博客</a></p><p>一些其他的位运算操作：</p><p>$-x = ~x + 1 = ~(x-1)$<br>$~x = -x-1$</p><p>$-(~x) = x+1$</p><p>$~(-x) = x-1$</p><p>$x+y = x - ~y - 1 = (x|y)+(x\&amp;y)$</p><p>$x-y = x + ~y + 1 = (x|~y)-(~x\&amp;y)$</p><p>$x^y = (x|y)-(x\&amp;y)$</p><p>$x|y = (x\&amp;~y)+y$</p><p>$x\&amp;y = (~x|y)-~x$</p><p>$x==y:    ~(x-y|y-x)$</p><p>$x!=y:    x-y|y-x$</p><p>$x&lt; y:    (x-y)^{xor}((x^{xor}y)\&amp;((x-y)^{xor}x))$</p><p>$x&lt;=y:    (x|~y)\&amp;((x^{xor}y)|~(y-x))$</p><p>$x&lt; y:    (~x\&amp;y)|((~x|y)\&amp;(x-y))$ //无符号x,y比较</p><p>$x&lt;=y:    (~x|y)\&amp;((x^{xor}y)|~(y-x))$//无符号x,y比较</p><p><del>主要还是多写题目</del></p><hr><p>当你写第一道题时候会发现根本不知道怎么写。。。    ——chtholly_micromaker</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithms" scheme="http://micromaker.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>&lt;背包&gt;solution-cf118d_Caesar&#39;s Legions</title>
    <link href="http://micromaker.github.io/2019/07/11/solution-cf118d/"/>
    <id>http://micromaker.github.io/2019/07/11/solution-cf118d/</id>
    <published>2019-07-11T04:22:46.000Z</published>
    <updated>2019-07-12T06:45:58.958Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://codeforces.com/contest/118/problem/D" target="_blank" rel="noopener">Caesar’s Legions</a></p><p>Gaius Julius Caesar, a famous general, loved to line up his soldiers. Overall the army had <em>n</em>1 footmen and <em>n</em>2 horsemen. Caesar thought that an arrangement is <strong>not</strong> beautiful if somewhere in the line there are strictly more that <em>k</em>1 footmen standing successively one after another, or there are strictly more than <em>k</em>2 horsemen standing successively one after another. Find the number of beautiful arrangements of the soldiers.</p><p>Note that all <em>n</em>1 + <em>n</em>2 warriors should be present at each arrangement. All footmen are considered indistinguishable among themselves. Similarly, all horsemen are considered indistinguishable among themselves.</p><p>Input</p><p>The only line contains four space-separated integers <em>n</em>1, <em>n</em>2, <em>k</em>1, <em>k</em>2 (1 ≤ <em>n</em>1, <em>n</em>2 ≤ 100, 1 ≤ <em>k</em>1, <em>k</em>2 ≤ 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.</p><p>Output</p><p>Print the number of beautiful arrangements of the army modulo 100000000 (108). That is, print the number of such ways to line up the soldiers, that no more than <em>k</em>1 footmen stand successively, and no more than <em>k</em>2 horsemen stand successively.</p><p>Examples</p><p>input1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 1 1 10</span><br></pre></td></tr></table></figure><p>output1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>input2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 1 2</span><br></pre></td></tr></table></figure><p>output2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>input3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4 1 1</span><br></pre></td></tr></table></figure><p>output3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>人话：有n1个步兵和n2个骑兵要排成一排,连续的步兵数量不能超过k1个,连续的骑兵数量不能超过k2个,问有几种排列方案</p><p>首先，<del>这肯定是个dp</del></p><p>我一开始考虑用$f[i][j]$表示i个步兵，j个骑兵的方案数，然后发现列不出方程。。。</p><p>这时候，我们可以考虑加一维来使我们能列方程</p><p>$f[i][j][0/1]$表示i个步兵，j个骑兵，当前这一个是0：步兵；1：骑兵的方案数</p><p>这时候方程就很好列了，根据题意</p><p>$f[i][j][0]$只可能从$f[i-k][j][1]$转移，这时候$0&lt;k&lt;k1$ ，</p><p>$f[i][j][1]$只可能从$f[i][j-k][0]$转移，这时候$0&lt;k&lt;k2$，</p><p>这里的$k$表示的是连续的k个步兵或连续的k个骑兵</p><p>然后，Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">101</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[MaxN][MaxN][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n1,n2,k1,k2;</span><br><span class="line">rd(n1);rd(n2);rd(k1);rd(k2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k1;++i)</span><br><span class="line">f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k2;++i)</span><br><span class="line">f[<span class="number">0</span>][i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n2;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=min(i,k1);++k)</span><br><span class="line">f[i][j][<span class="number">0</span>]+=f[i-k][j][<span class="number">1</span>],f[i][j][<span class="number">0</span>]%=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=min(j,k2);++k)</span><br><span class="line">f[i][j][<span class="number">1</span>]+=f[i][j-k][<span class="number">0</span>],f[i][j][<span class="number">1</span>]%=p;</span><br><span class="line"><span class="comment">//printf("%d %d\n",min(i,k1),min(j,k2));</span></span><br><span class="line"><span class="comment">//printf("%d %d\n",f[i][j][0],f[i][j][1]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,(f[n1][n2][<span class="number">0</span>]+f[n1][n2][<span class="number">1</span>])%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一点要注意的，for枚举k时要判一下，不能出现访问负数下标的情况，否则会RE或WA</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>20190710双人开黑CF模拟赛</title>
    <link href="http://micromaker.github.io/2019/07/10/cfcontestanswer20190710/"/>
    <id>http://micromaker.github.io/2019/07/10/cfcontestanswer20190710/</id>
    <published>2019-07-10T14:33:57.000Z</published>
    <updated>2019-07-11T02:24:52.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://codeforces.com/contest/1186" target="_blank" rel="noopener">Codeforces Round #571 (Div. 2)</a></p><p><img src="https://s2.ax1x.com/2019/07/10/Zgaq3Q.png" alt=""></p><p><img src="https://s2.ax1x.com/2019/07/10/Zgab9g.png" alt=""></p><p>日常被tanao_大佬带飞，我AC了A和C（B题没了。。。否则tanao_大佬肯定把我吊打）</p><p><a href="http://codeforces.com/contest/1186/problem/A" target="_blank" rel="noopener">A. Vus the Cossack and a Contest</a></p><p>Vus the <a href="https://en.wikipedia.org/wiki/Cossacks" target="_blank" rel="noopener">Cossack</a> holds a programming competition, in which $n$ people participate. He decided to award them all with pens and notebooks. It is known that Vus has exactly $m$ pens and $k$ notebooks.</p><p>Determine whether the Cossack can reward <strong>all</strong> participants, giving each of them at least one pen and at least one notebook.</p><p>Input</p><p>The first line contains three integers $n$, $m$, and $k$ (1≤n,m,k≤100) — the number of participants, the number of pens, and the number of notebooks respectively.</p><p>Output</p><p>Print “Yes” if it possible to reward all the participants. Otherwise, print “No”.</p><p>You can print each letter in any case (upper or lower).</p><p>Div.2的A标准打卡题难度，翻译：</p><p>给你整数n、m、k，判断m和k是否都大于等于n</p><p>这好像都比noip2018pj的t1都要简单。。。</p><p>直接if完事</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">rd(n);rd(m);rd(k);</span><br><span class="line"><span class="keyword">if</span>(m&gt;=n&amp;&amp;k&gt;=n)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codeforces.com/contest/1186/problem/C" target="_blank" rel="noopener">C. Vus the Cossack and Strings</a></p><p>Vus the Cossack has two binary strings, that is, strings that consist only of “0” and “1”. We call these strings a and b. It is known that |b|≤|a|, that is, the length of b is at most the length of a.</p><p>The Cossack considers every substring of length |b| in string a. Let’s call this substring c. He matches the corresponding characters in b and c, after which he counts the number of positions where the two strings are different. We call this function f(b,c).</p><p>For example, let b=00110, and c=11000. In these strings, the first, second, third and fourth positions are different.</p><p>Vus the Cossack counts the number of such substrings c such that f(b,c) is <strong>even</strong>.</p><p>For example, let a=01100010 and b=00110. aa has four substrings of the length |b|: 01100, 11000, 10001, 00010.</p><ul><li>f(00110,01100)=2;</li><li>f(00110,11000)=4;</li><li>f(00110,10001)=4;</li><li>f(00110,00010)=1.</li></ul><p>Since in three substrings, f(b,c)f(b,c) is even, the answer is 33.</p><p>Vus can not find the answer for big strings. That is why he is asking you to help him.</p><p>Input</p><p>The first line contains a binary string a $(1≤|a|≤10^6)$ — the first string.</p><p>The second line contains a binary string b $(1≤|b|≤|a|)$ — the second string.</p><p>Output</p><p>Print one number — the answer.</p><p>input1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">01100010</span><br><span class="line">00110</span><br></pre></td></tr></table></figure><p>output1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>input2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1010111110</span><br><span class="line">0110</span><br></pre></td></tr></table></figure><p>output2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>人话：</p><p>给你两个个二进制串a和b，b的长度小于等于a，将a的每个长度位b长度的连续子序列拿出来和a进行f操作，f操作就是比对两个串有几位不同，如果这个数是偶数，那么答案加一</p><p>样例1的解释在题面里有了</p><p>那么直接开始分析吧：</p><p>这个f操作一看就知道是异或然后统计1的个数，但是直接做或者bitset都会超时，那么</p><p>这题看到偶数就应该想到奇偶性，那么奇偶性与 和以及异或和 是有关的，于是。。。</p><p>把a串的前缀和求出来，再把b串的异或和求出来</p><p>然后看看，我们只要得知f结果的奇偶性就好了，并不要得知他是多少</p><p>所以，a的前缀和可以帮我们知道a的一段区间内和的奇偶性，我们也可以得知这段区间内1的出现次数的奇偶性</p><p>那么，b的异或和可以帮助我们知道b串中1的出现次数的奇偶性</p><p>那么，如果这两个奇偶性相同时，那么我们就得知他们异或后的结果内1的个数是偶数个</p><p>$e.g.$:我们定义g函数为区间内1出现次数的奇偶性（1奇，0偶）</p><p>$g(10101)=1$, $g(10010)=0$, 所以它们异或后的结果1的个数一定为奇数个</p><p>检验：$10101 xor 10010 = 00111$</p><p>那么代码就有了，Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ia[MaxN],ib[MaxN];</span><br><span class="line"><span class="keyword">int</span> a[MaxN],b[MaxN],f[MaxN],g[MaxN];</span><br><span class="line"><span class="keyword">int</span> lena,lenb;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,ia+<span class="number">1</span>,ib+<span class="number">1</span>);</span><br><span class="line">lena=<span class="built_in">strlen</span>(ia+<span class="number">1</span>),lenb=<span class="built_in">strlen</span>(ib+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//printf("%d %d",lena,lenb);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lena;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=(ia[i]==<span class="string">'1'</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">f[i]=f[i<span class="number">-1</span>]+a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenb;++i)</span><br><span class="line">&#123;</span><br><span class="line">b[i]=(ib[i]==<span class="string">'1'</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">g[i]=g[i<span class="number">-1</span>]^b[i];</span><br><span class="line">&#125;</span><br><span class="line">reg <span class="keyword">int</span> ans=<span class="number">0</span>,k,u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lenb;i&lt;=lena;++i)</span><br><span class="line">&#123;</span><br><span class="line">u=i-lenb+<span class="number">1</span>;</span><br><span class="line">k=(f[i]-f[u<span class="number">-1</span>])&amp;<span class="number">1</span>;</span><br><span class="line">k=!k;</span><br><span class="line">ans+=k^g[lenb]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codeforces.com/contest/1186/problem/D" target="_blank" rel="noopener">D. Vus the Cossack and Numbers</a></p><p>关于D题，其实是我先开题的，结果我觉得C题可做，巨佬tanao_觉得D题可做，就换题了，我打了一份D的代码，结果马上被我叉了。。。这里不贴出来了，这里贴一下<strong>tanao_巨佬的代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">c</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">100000</span>==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> x-x%<span class="number">100000</span><span class="number">-100000</span>;</span><br><span class="line"><span class="keyword">return</span> x-x%<span class="number">100000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x=read();</span><br><span class="line"><span class="keyword">if</span>(c(sum)+c(x)==c(sum+x))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c(x)/<span class="number">100000</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c(x)/<span class="number">100000</span>+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">sum+=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我大概看了一下巨佬的代码，首先把浮点数乘以100000防止卡精度，然后？？？？？，我写了主体70多行就被巨佬20多行解决了？</p><p>不过思路差不多，开一个sum用来记录过去剩下的东西，如果和现在的加起来刚好能控制在0.5内，那么就直接取整，否则加1是吧。。。</p><p><strong>各位大佬还是看代码理解一下…</strong></p><p>果然还是我太菜了awa</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 解题报告" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>&lt;背包&gt;solution_cf366c_Dima and Salad</title>
    <link href="http://micromaker.github.io/2019/07/10/solution-cf366c/"/>
    <id>http://micromaker.github.io/2019/07/10/solution-cf366c/</id>
    <published>2019-07-10T08:11:31.000Z</published>
    <updated>2019-07-12T06:45:34.675Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://codeforces.com/problemset/problem/366/C" target="_blank" rel="noopener">Dima and Salad</a></p><p>Dima, Inna and Seryozha have gathered in a room. That’s right, someone’s got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something.</p><p>Dima and Seryozha have <em>n</em> fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal <em>k</em>. In other words, <img src="http://codeforces.com/predownloaded/10/ee/10eec4fa6028c5a0ba5b14ab6c44d4c5a72e6732.png" alt="img"> , where <em>aj</em> is the taste of the <em>j</em>-th chosen fruit and <em>bj</em> is its calories.</p><p>Inna hasn’t chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!</p><p>Inna loves Dima very much so she wants to make the salad from at least one fruit.</p><p>Input</p><p>The first line of the input contains two integers <em>n</em>, <em>k</em> (1 ≤ <em>n</em> ≤ 100, 1 ≤ <em>k</em> ≤ 10). The second line of the input contains <em>n</em> integers <em>a</em>1, <em>a</em>2, …, <em>an</em> (1 ≤ <em>ai</em> ≤ 100) — the fruits’ tastes. The third line of the input contains <em>n</em> integers <em>b</em>1, <em>b</em>2, …, <em>bn</em> (1 ≤ <em>bi</em> ≤ 100) — the fruits’ calories. Fruit number <em>i</em> has taste <em>ai</em> and calories <em>bi</em>.</p><p>Output</p><p>If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.</p><p>样例</p><p>input1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">10 8 1</span><br><span class="line">2 7 1</span><br></pre></td></tr></table></figure><p>output1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><p>input2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">4 4 4 4 4</span><br><span class="line">2 2 2 2 2</span><br></pre></td></tr></table></figure><p>output2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><p>人话：</p><p>n个物品，k为倍数。每个物品有两个属性（ai和bi），求在满足所取物品的a属性和是b属性和的k倍的前提下，问a属性的最大值是多少</p><p>按照题意，就是要让我们选出一些组aibi，使的：</p><p>$\frac{a_1+a_2+…+a_j}{b_1+b_2+…+b_j}=k$，然后移项，得$a_1+a_2+…+a_j=k(b_1+b_2+…+b_j)$</p><p>得$(a_1-b_1k)+(a_2-b_2k)+…+(a_j-b_jk)=0$，很像0/1分数规划，对不对</p><p>但是<del>这题分类是背包</del></p><p>观察公式，发现这其实是一个容量为0的01背包，</p><p>我们可以把$a_i-b_ik$看作一个物品的体积，$a_i$看作价值，，然后一个标准的01背包模板</p><p>那么，背包的容量？容量为0怎么枚举呢？</p><p>先来想一想，$(a_i-b_ik)$是不是有可能为负数？那么怎么办呢？</p><p>可以考虑开两个背包，容量分别为V和-V，那么加起来就抵消为0，正容量的背包处理正体积的，负容量的背包处理负体积的</p><p>很好，到这一步，套个模板就可以交啦！</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">101</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxX=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> w[MaxN],c[MaxN];</span><br><span class="line"><span class="keyword">int</span> f[MaxX+<span class="number">1</span>],g[MaxX+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0xc3</span>,<span class="keyword">sizeof</span> f);f[<span class="number">0</span>]=<span class="number">0</span>; </span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0xc3</span>,<span class="keyword">sizeof</span> g);g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> W,C;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(w[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(c[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">W=w[i],C=c[i];</span><br><span class="line">w[i]=W-k*C;c[i]=W;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("wi: %d   ci: %d\n",w[i],c[i]);</span></span><br><span class="line"><span class="keyword">if</span>(w[i]&gt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=MaxX;j&gt;=w[i];--j)</span><br><span class="line">f[j]=max(f[j],f[j-w[i]]+c[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=MaxX;j&gt;=-w[i];--j)</span><br><span class="line">g[j]=max(g[j],g[j+w[i]]+c[i]);</span><br><span class="line"><span class="comment">//for(int j=1;j&lt;=n;++j)</span></span><br><span class="line"><span class="comment">//printf("fi: %d %d   ",f[i],g[i]);puts(""); </span></span><br><span class="line">&#125;</span><br><span class="line">reg <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MaxX;++i)</span><br><span class="line">ans=max(ans,f[i]+g[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,!ans?<span class="number">-1</span>:ans);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 题解" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>20190708三人开黑CF模拟赛</title>
    <link href="http://micromaker.github.io/2019/07/09/cfcontestanswer20190709/"/>
    <id>http://micromaker.github.io/2019/07/09/cfcontestanswer20190709/</id>
    <published>2019-07-09T14:05:57.000Z</published>
    <updated>2019-07-10T08:09:59.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>7月8号晚上8点和两位巨佬开了一场虚拟cf: [<a href="http://codeforces.com/contest/958" target="_blank" rel="noopener">Helvetic Coding Contest 2018 online mirror (teams allowed, unrated)</a>]</p><p>我这么<del>蔡</del>，只AC了A2、C1、C2、E1（被巨佬吊打）</p><p><img src="https://s2.ax1x.com/2019/07/09/Z6lurQ.png" alt=""></p><p>我就说一下我写的几道题吧：</p><p><a href="http://codeforces.com/contest/958/problem/A2" target="_blank" rel="noopener">A2. Death Stars (medium)</a></p><p>The stardate is 1983, and Princess Heidi is getting better at detecting the Death Stars. This time, two Rebel spies have yet again given Heidi two maps with the possible locations of the Death Star. Since she got rid of all double agents last time, she knows that both maps are correct, and indeed show the map of the solar system that contains the Death Star. However, this time the Empire has hidden the Death Star very well, and Heidi needs to find a place that appears on both maps in order to detect the Death Star.</p><p>The first map is an <em>N</em> × <em>M</em> grid, each cell of which shows some type of cosmic object that is present in the corresponding quadrant of space. The second map is an <em>M</em> × <em>N</em> grid. Heidi needs to align those two maps in such a way that they overlap over some <em>M</em> × <em>M</em> section in which all cosmic objects are identical. Help Heidi by identifying where such an <em>M</em> × <em>M</em> section lies within both maps.</p><p>Input</p><p>The first line of the input contains two space-separated integers <em>N</em> and <em>M</em> (1 ≤ <em>N</em> ≤ 2000, 1 ≤ <em>M</em> ≤ 200, <em>M</em> ≤ <em>N</em>). The next <em>N</em> lines each contain <em>M</em> lower-case Latin characters (a-z), denoting the first map. Different characters correspond to different cosmic object types. The next <em>M</em> lines each contain <em>N</em> characters, describing the second map in the same format.</p><p>Output</p><p>The only line of the output should contain two space-separated integers <em>i</em> and <em>j</em>, denoting that the section of size <em>M</em> × <em>M</em> in the first map that starts at the <em>i</em>-th row is equal to the section of the second map that starts at the <em>j</em>-th column. Rows and columns are numbered starting from 1.</p><p>If there are several possible ways to align the maps, Heidi will be satisfied with any of those. It is guaranteed that a solution exists.</p><p>翻译后的人话：</p><p>给你两个矩阵，前一个$N×M$，后一个$M×N$，然后再两个矩阵中识别一个$M×M$的矩阵，这个矩阵都存在于两个矩阵中</p><p>好水啊，可以用kmp，不过我太蔡不会于是直接hash暴力匹配</p><p>这里用了单哈希，参考了巨佬队友tanao_的代码，我双哈希不知道为什么T飞（可能是我太蔡了）</p><p>直接上代码（把注释去掉就变成双hash了）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">2001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM=<span class="number">201</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7ffffffffffffff</span>; <span class="comment">// 14 f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> base1=<span class="number">131</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> base2=<span class="number">13131</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p1=<span class="number">4503599627370001l</span>l;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p2=<span class="number">4503599627391001l</span>l;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">string</span> s1[MaxN],s2[MaxN];</span><br><span class="line"><span class="keyword">int</span> s1hash1[MaxN],s2hash1[MaxM][MaxN];</span><br><span class="line"><span class="keyword">int</span> s1hash2[MaxN],s2hash2[MaxM][MaxN];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gethash1</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();++i)</span><br><span class="line">res=(res*base1+s[i])%p1;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gethash2</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();++i)</span><br><span class="line">res=(res*base2+s[i])%p2;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="comment">//if(s1hash1[x+i-1]!=s2hash1[i][y]||s1hash2[x+i-1]!=s2hash2[i][y])</span></span><br><span class="line"><span class="keyword">if</span>(s1hash1[x+i<span class="number">-1</span>]!=s2hash1[i][y])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rd(n);rd(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s2[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">s1hash1[i]=gethash1(s1[i]);</span><br><span class="line"><span class="comment">//s1hash2[i]=gethash2(s1[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-m+<span class="number">1</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line">s2hash1[i][j]=gethash1(s2[i].substr(j<span class="number">-1</span>,m));</span><br><span class="line"><span class="comment">//s2hash2[i][j]=gethash2(s2[i].substr(j-1,m));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-m+<span class="number">1</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n-m+<span class="number">1</span>;++j)</span><br><span class="line"><span class="keyword">if</span>(ck(i,j))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld"</span>,i,j),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codeforces.com/contest/958/problem/C1" target="_blank" rel="noopener">C1. Encryption (easy)</a></p><p>Rebel spy Heidi has just obtained the plans for the Death Star from the Empire and, now on her way to safety, she is trying to break the encryption of the plans (of course they are encrypted – the Empire may be evil, but it is not stupid!). The encryption has several levels of security, and here is how the first one looks.</p><p>Heidi is presented with a screen that shows her a sequence of integers <em>A</em> and a positive integer <em>p</em>. She knows that the encryption code is a single number <em>S</em>, which is defined as follows:</p><p>Define the score of <em>X</em> to be the sum of the elements of <em>X</em> modulo <em>p</em>.</p><p>Heidi is given a sequence <em>A</em> that consists of <em>N</em> integers, and also given an integer <em>p</em>. She needs to split <em>A</em> into 2 parts such that:</p><ul><li>Each part contains at least 1 element of <em>A</em>, and each part consists of contiguous elements of <em>A</em>.</li><li>The two parts do not overlap.</li><li>The total sum <em>S</em> of the scores of those two parts is maximized. This is the encryption code.</li></ul><p>Output the sum <em>S</em>, which is the encryption code.</p><p>Input</p><p>The first line of the input contains two space-separated integer <em>N</em> and <em>p</em> (2 ≤ <em>N</em> ≤ 100 000, 2 ≤ <em>p</em> ≤ 10 000) – the number of elements in <em>A</em>, and the modulo for computing scores, respectively.</p><p>The second line contains <em>N</em> space-separated integers which are the elements of <em>A</em>. Each integer is from the interval [1, 1 000 000].</p><p>Output</p><p>Output the number <em>S</em> as described in the problem statement.</p><p>样例1</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 10</span><br><span class="line">3 4 7 2</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><p>经过印度女工翻译后的人话：</p><p>把长度为n的序列分成两个部分，使每个子序列的和对p取模后的结果的和最大</p><p>样例解释1:</p><p>$(3+4) mod 10+(7+2) mod 10 = 16$</p><p>$n&lt;=100000$ 直接前缀和暴力枚举断点水过</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">100001</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[MaxN],f[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[r]-f[l<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,p;</span><br><span class="line">reg <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">rd(n);rd(p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(a[i]),f[i]=f[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">ans=max(ans,(getsum(<span class="number">1</span>,i)%p)+(getsum(i+<span class="number">1</span>,n)%p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codeforces.com/contest/958/problem/C2" target="_blank" rel="noopener">C2. Encryption (medium)</a></p><p>Heidi has now broken the first level of encryption of the Death Star plans, and is staring at the screen presenting her with the description of the next code she has to enter. It looks surprisingly similar to the first one – seems like the Empire engineers were quite lazy…</p><p>Heidi is once again given a sequence <em>A</em>, but now she is also given two integers <em>k</em> and <em>p</em>. She needs to find out what the encryption key <em>S</em> is.</p><p>Let <em>X</em> be a sequence of integers, and <em>p</em> a positive integer. We define the score of <em>X</em> to be the sum of the elements of <em>X</em> modulo <em>p</em>.</p><p>Heidi is given a sequence <em>A</em> that consists of <em>N</em> integers, and also given integers <em>k</em> and <em>p</em>. Her goal is to split <em>A</em> into <em>k</em> part such that:</p><ul><li>Each part contains at least 1 element of <em>A</em>, and each part consists of contiguous elements of <em>A</em>.</li><li>No two parts overlap.</li><li>The total sum <em>S</em> of the scores of those parts is maximized.</li></ul><p>Output the sum <em>S</em> – the encryption code.</p><p>Input</p><p>The first line of the input contains three space-separated integer <em>N</em>, <em>k</em> and <em>p</em> (<em>k</em> ≤ <em>N</em> ≤ 20 000, 2 ≤ <em>k</em> ≤ 50, 2 ≤ <em>p</em> ≤ 100) – the number of elements in <em>A</em>, the number of parts <em>A</em> should be split into, and the modulo for computing scores, respectively.</p><p>The second line contains <em>N</em> space-separated integers that are the elements of <em>A</em>. Each integer is from the interval [1, 1 000 000].</p><p>Output</p><p>Output the number <em>S</em> as described in the problem statement.</p><p>上一题的升级版</p><p>人话：把长度为n的序列分成k个部分，使每个子序列的和对p取模后的结果的和最大</p><p>很明显，考虑dp</p><p>$f[i][j]$ 表示前i个数分成j段时的最大结果</p><p>转移方程很简单，</p><p>$f[i][j]=max(f[i][j],f[k][j-1]+(g[i]-g[k])mod p)$ $(0&lt;=k&lt;i)$</p><p>解释一下，g[i]是前缀和，$f[k][j-1]$表示在第k个数断j-1个点时的最大结果，$(g[i]-g[k])$就是k+1~i这段序列和，k是用来枚举用的，看不懂建议先去做一些基础的dp</p><p>分析一下复杂度$O(n^2k)$，最大计算次数为$2.0×10^{10}$，20亿<del>，好，信心满满地相信CF的机子交上去</del></p><p>考虑优化，我们是不是可以把一个n搞成p来减少时间复杂度呢</p><p>$f[i][j]$表示前i个数对p取模后为i，分成j段时的最大结果</p><p><del>显而易见</del>，首先，因为dp数组的第一维的范围只有$[0,p-1]$，那么$f[i][j]$只有可能从$f[k][j-1]$$(0&lt;=k&lt;p)$转移过来，那么对应断点所得新的子序列的和就是$(g[i]-k)modp$，所以可以得到状态转移方程</p><p>$f[i][j]=max(f[i][j],f[k][j-1]+(g[i]-k)modp)$$0&lt;=k&lt;p$</p><p>于是，Code就出来了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">20001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxK=<span class="number">51</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k,p;</span><br><span class="line"><span class="keyword">int</span> a[MaxN],g[MaxN];</span><br><span class="line"><span class="keyword">int</span> f[MaxN][MaxK];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x80</span>,<span class="keyword">sizeof</span> f);f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">rd(n);rd(k);rd(p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">rd(a[i]),g[i]=g[i<span class="number">-1</span>]+a[i],g[i]%=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=k;j;--j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;p;++k)</span><br><span class="line">f[g[i]][j]=max(f[g[i]][j],f[k][j<span class="number">-1</span>]+(g[i]+p-k)%p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,f[g[n]][k]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://codeforces.com/contest/958/problem/E1" target="_blank" rel="noopener">E1. Guard Duty (easy)</a></p><p>The Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign <em>R</em> Rebel spaceships to guard <em>B</em> bases so that every base has exactly one guardian and each spaceship has exactly one assigned base (in other words, the assignment is a perfect matching). Since she knows how reckless her pilots are, she wants to be sure that any two (straight) paths – from a base to its assigned spaceship – do not intersect in the galaxy plane (that is, in 2D), and so there is no risk of collision.</p><p>Input</p><p>The first line contains two space-separated integers <em>R</em>, <em>B</em>(1 ≤ <em>R</em>, <em>B</em> ≤ 10). For 1 ≤ <em>i</em> ≤ <em>R</em>, the <em>i</em> + 1-th line contains two space-separated integers <em>xi</em> and <em>yi</em> (|<em>xi</em>|, |<em>yi</em>| ≤ 10000) denoting the coordinates of the <em>i</em>-th Rebel spaceship. The following <em>B</em> lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.</p><p>Output</p><p>If it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No (without quote).</p><p>使用谷歌翻译然后看看样例再<strong>大胆的猜想一下</strong>就看懂题意了，<del>其实我当时也不知道我能一次A</del></p><p>还好我当时猜对了题意</p><p>有R个叛军基地和B个守卫基地，要求一种匹配，使每一个叛军基地都和一个守卫基地连线，如果存在一种连线方法能让每一个基地都有匹配并且这些线段两两不相交，那么输出Yes，否则输出No</p><p>$1&lt;=R,B&lt;=10$，直接暴力枚举每一种情况，判断；如果$R!=B$，直接输出No</p><p>暴力好写，但是怎么判断两条线段是否相交呢？</p><p>这里使用了<strong>快速排斥实验</strong>和<strong>跨立实验</strong>法，参考<a href="https://blog.csdn.net/HelloZEX/article/details/80880385" target="_blank" rel="noopener">一位巨佬的博客</a>(好几个月前看过，好不容易翻出来的)</p><p>快速排斥实验：判断两条线段在 x 以及 y 坐标的投影是否有重合</p><p>人话：若A线段中x较大的端点比B线段中x较小的端点的x要小，</p><p>​            或A线段中y较大的端点比B线段中y较小的端点的y要小，则AB线段不相交</p><p><img src="https://s2.ax1x.com/2019/07/09/Z6JrvV.png" alt=""></p><p>如图，图（1）和图（2）可以自己推出符合快速排斥，可图（3）就不符合快速排斥了</p><p>那么就要用到跨立实验法，也就是矢量叉积：</p><p>设矢量 $P = (x1, y1)，Q = ( x2, y2 )$，则矢量叉积定义为：$P×Q = x1×y2 - x2×y1$</p><p>有$P×Q = - ( Q×P ) $和 $P×( - Q ) = - ( P×Q )$</p><p>若 $P×Q &gt; 0$ , 则 $P$ 在 $Q$ 的顺时针方向。<br>若 $P×Q &lt; 0$ , 则 $P$ 在 $Q$ 的逆时针方向。<br>若 $P×Q = 0$ , 则 $P$ 与 $Q$ 共线，但可能同向也可能反向。</p><p>(1):<img src="https://s2.ax1x.com/2019/07/10/Z62jv8.png" alt=""></p><p>如果两线段相交那么就意味着它们互相跨立，即如上图点 A 和 B 分别在线段 CD 两侧，点 C 和 D 分别在线 AB 两侧。<br>判断 A 点与 B 点是否在线段 DC 的两侧，即向量 A-D 与向量 B-D 分别在向量 C-D 的两端，也就是其叉积是异号的，即 。<br>同时也要证明 C 点与 D 点在线段 AB 的两端，两个同时满足，则表示线段相交。</p><p>(2):临界情况，也就是上式恰好等于 0 的情况下：</p><p><img src="https://s2.ax1x.com/2019/07/10/Z62Xgf.png" alt=""></p><p>当出现如上图所示的情况的时候，显然，这种情况是相交的。只要将等号直接补上即可。</p><p>(3)再看看上面我给的图（3）：</p><p>当出现如上所示的情况的时候，叉积都为 0, 可以通过跨立实验，但是两个线段并没有交点。不过还好，这种情况在第一步快速排斥已经被排除了。</p><p>给出AC代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN=<span class="number">11</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[MaxN],b[MaxN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> xa,xb,ya,yb;</span><br><span class="line">&#125;E[<span class="number">10001</span>]; </span><br><span class="line"><span class="keyword">int</span> en;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">t</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">rd</span>(<span class="title">t</span> &amp;<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))</span><br><span class="line">c=getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))</span><br><span class="line">s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=getchar();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">tix</span><span class="params">(Line x,Line y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((x.xa &gt; x.xb ? x.xa : x.xb) &lt; (y.xa &lt; y.xb ? y.xa : y.xb) ||</span><br><span class="line">        (x.ya &gt; x.yb ? x.ya : x.yb) &lt; (y.ya &lt; y.yb ? y.ya : y.yb) ||</span><br><span class="line">        (y.xa &gt; y.xb ? y.xa : y.xb) &lt; (x.xa &lt; x.xb ? x.xa : x.xb) ||</span><br><span class="line">        (y.ya &gt; y.yb ? y.ya : y.yb) &lt; (x.ya &lt; x.yb ? x.ya : x.yb))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> ((((x.xa - y.xa)*(y.yb - y.ya) - (x.ya - y.ya)*(y.xb - y.xa))*</span><br><span class="line">        ((x.xb - y.xa)*(y.yb - y.ya) - (x.yb - y.ya)*(y.xb - y.xa))) &gt; <span class="number">0</span> ||</span><br><span class="line">        (((y.xa - x.xa)*(x.yb - x.ya) - (y.ya - x.ya)*(x.xb - x.xa))*</span><br><span class="line">        ((y.xb - x.xa)*(x.yb - x.ya) - (y.yb - x.ya)*(x.xb - x.xa))) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> R,B;</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ck</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=B;++j)</span><br><span class="line"><span class="keyword">if</span>(tix(E[i],E[j]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ck())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B;++i)</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line">E[dep].xa=a[dep].x;</span><br><span class="line">E[dep].ya=a[dep].y;</span><br><span class="line">E[dep].xb=b[i].x;</span><br><span class="line">E[dep].yb=b[i].y;</span><br><span class="line">dfs(dep+<span class="number">1</span>);</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rd(R);rd(B);</span><br><span class="line"><span class="keyword">if</span>(R!=B)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)</span><br><span class="line">&#123;</span><br><span class="line">rd(a[i].x);rd(a[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B;++i)</span><br><span class="line">&#123;</span><br><span class="line">rd(b[i].x);rd(b[i].y);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次写cf的解题报告awa</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="OI之旅 - 解题报告" scheme="http://micromaker.github.io/tags/OI%E4%B9%8B%E6%97%85-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>20190202海洋城义工</title>
    <link href="http://micromaker.github.io/2019/02/01/20190202%E6%B5%B7%E6%B4%8B%E5%9F%8E%E4%B9%89%E5%B7%A5/"/>
    <id>http://micromaker.github.io/2019/02/01/20190202海洋城义工/</id>
    <published>2019-02-01T09:02:11.000Z</published>
    <updated>2019-02-01T09:26:37.751Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="海洋城献血-做义工-社会实践活动方案"><a href="#海洋城献血-做义工-社会实践活动方案" class="headerlink" title="海洋城献血(做义工)社会实践活动方案"></a>海洋城献血(做义工)社会实践活动方案</h1><ul><li><h3 id="时间：2019-年-2-月-2-日-星期六-9-00-12-30-a-m"><a href="#时间：2019-年-2-月-2-日-星期六-9-00-12-30-a-m" class="headerlink" title="时间：2019 年 2 月 2 日 星期六 9:00~12:30 a.m."></a>时间：2019 年 2 月 <strong>2</strong> 日 星期<strong>六</strong> <strong>9:00~12:30</strong> a.m.</h3></li><li><h3 id="地点：新昌县人民医院-gt-新昌县海洋城"><a href="#地点：新昌县人民医院-gt-新昌县海洋城" class="headerlink" title="地点：新昌县人民医院 -&gt; 新昌县海洋城"></a>地点：新昌县<strong>人民医院</strong> -&gt; 新昌县<strong>海洋城</strong></h3></li><li><h3 id="目的：使同学们接触社会，体验社会，体验到乐于助人的快乐。"><a href="#目的：使同学们接触社会，体验社会，体验到乐于助人的快乐。" class="headerlink" title="目的：使同学们接触社会，体验社会，体验到乐于助人的快乐。"></a>目的：使同学们接触社会，体验社会，体验到乐于助人的快乐。</h3></li></ul><h3 id="人员安排-现场指定-："><a href="#人员安排-现场指定-：" class="headerlink" title="人员安排(现场指定)："></a>人员安排(现场指定)：</h3><ul><li><p><strong>2</strong> 人帮助献血者填表</p></li><li><p><strong>2</strong> 人为献血者献血后服务 (如倒茶、帮助献血者按抽血处等)</p></li><li><p>其余人员分组做好科普工作 (如让人们踊跃献血)</p></li></ul><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1.安全第一。活动期间尽量集体活动，不要单独行动。如果遇到紧急情况，冷静处理，和班委取得联系。</p><p>2.注意保管好随身携带的贵重物品。保留活动期间的材料。</p><p>3.注意记录实践活动过程，照片、视频不可少。</p><p>4.服从安排，实践活动期间不要做与活动无关的事情。</p><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><p>1.参加活动的同学于 2019 年 2 月 <strong>2</strong> 日 <strong>上午9:00</strong> 在<a href="https://j.map.baidu.com/0Yu7P" target="_blank" rel="noopener">新昌县人民医院行政楼</a>(<strong>三号楼</strong>)门口集合。<strong>(穿好校服、带好校牌)</strong></p><p>2.先到新昌县<strong>人民医院</strong> 培训宣传科普知识，再到海洋城实践活动。</p><p>3.宣传人员的宣传资源准备好。</p><h4 id="城关中学七-8-班"><a href="#城关中学七-8-班" class="headerlink" title="城关中学七(8)班"></a>城关中学七(8)班</h4><h4 id="2019-年-1-月-31-日"><a href="#2019-年-1-月-31-日" class="headerlink" title="2019 年 1 月 31 日"></a>2019 年 1 月 31 日</h4><h4 id="Write-by-WSY-YNC"><a href="#Write-by-WSY-YNC" class="headerlink" title="Write by WSY YNC"></a>Write by WSY YNC</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学校杂事" scheme="http://micromaker.github.io/tags/%E5%AD%A6%E6%A0%A1%E6%9D%82%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>2019冬季期末考试</title>
    <link href="http://micromaker.github.io/2019/01/24/2019%E5%86%AC%E5%AD%A3%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/"/>
    <id>http://micromaker.github.io/2019/01/24/2019冬季期末考试/</id>
    <published>2019-01-24T14:27:39.000Z</published>
    <updated>2019-01-24T14:36:47.458Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这次期末考，文体两开花</p><p>语文77，数学97,英语91,科学96,历社94,体育27</p><p>总分482</p><p>如果好好检查数学能AK<del>(有一题没检查出来)</del>,历社能加3分<del>(湄公河字写错qwq)</del></p><p>心态爆炸</p><p>寒假作业挺少的，薄薄的一本</p><p>然后班主任又把一堆科技创新东西推给我</p><p>一个微电影、两个科技作品(程序设计、3D建模、微动漫啥的)</p><p>一个人做完？$tan90$</p><p>寒假里15天都在外面OI培训</p><p><del>科技作品扔给科创小组算了</del></p><p>微电影emm，<del>随便拍一下好了，反正我OIer又不是这专业的qwq</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Life" scheme="http://micromaker.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>本un颓废的蒟蒻轻小说记录</title>
    <link href="http://micromaker.github.io/2019/01/17/light_novel-reads/"/>
    <id>http://micromaker.github.io/2019/01/17/light_novel-reads/</id>
    <published>2019-01-17T14:21:51.000Z</published>
    <updated>2019-05-20T12:52:01.374Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>带*号为实体书</p><div class="table-container"><table><thead><tr><th style="text-align:left">名字</th><th style="text-align:left">卷数</th><th style="text-align:left">时间(看完的时间)</th><th style="text-align:left">作者</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">末日时在做什么？有没有空？可以来拯救么？*</td><td style="text-align:left">第 1 卷</td><td style="text-align:left">2019.01.29</td><td style="text-align:left">[Japan]枯野瑛</td><td style="text-align:left">珂朵莉!</td></tr><tr><td style="text-align:left">末日时在做什么？有没有空？可以来拯救么？*</td><td style="text-align:left">第 2 卷</td><td style="text-align:left">2019.02.28</td><td style="text-align:left">[Japan]枯野瑛</td><td style="text-align:left">珂朵莉!!</td></tr><tr><td style="text-align:left">末日时在做什么？有没有空？可以来拯救么？*</td><td style="text-align:left">第 3 卷</td><td style="text-align:left">2019.03.11</td><td style="text-align:left">[Japan]枯野瑛(魔鬼)</td><td style="text-align:left">珂朵莉!!!</td></tr><tr><td style="text-align:left">你的名字.*</td><td style="text-align:left">第 1 卷</td><td style="text-align:left">2019.03.18</td><td style="text-align:left">[Japan]新海诚</td><td style="text-align:left">5km/s</td></tr><tr><td style="text-align:left">末日时在做什么？有没有空？可以来拯救么？*</td><td style="text-align:left">第 4 卷</td><td style="text-align:left">2019.03.20</td><td style="text-align:left">[Japan]枯野瑛</td><td style="text-align:left">我珂领盒饭了,奈芙莲接力!</td></tr><tr><td style="text-align:left">末日时在做什么？有没有空？可以来拯救么？*</td><td style="text-align:left">第 5 卷</td><td style="text-align:left">-</td><td style="text-align:left">[Japan]枯野瑛</td><td style="text-align:left">我珂领盒饭了,奈芙莲接力!</td></tr><tr><td style="text-align:left">秒速五厘米*</td><td style="text-align:left">第 1 卷</td><td style="text-align:left">-</td><td style="text-align:left">[Japan]新海诚</td><td style="text-align:left">5cm/s</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 1 卷</td><td style="text-align:left">2019.03.25</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordArtOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 2 卷</td><td style="text-align:left">2019.03.28</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordArtOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 3 卷</td><td style="text-align:left">2019.03.29</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">ALfheimOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 4 卷</td><td style="text-align:left">2019.03.31</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">ALfheimOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 5 卷</td><td style="text-align:left">2019.04.02</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">GunGaleOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 6 卷</td><td style="text-align:left">2019.04.04</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">GunGaleOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 7 卷</td><td style="text-align:left">2019.04.19</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">ALfheimOnline!</td></tr><tr><td style="text-align:left">刀剑神域*</td><td style="text-align:left">第 8 卷</td><td style="text-align:left">2019.04.19</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordALfOnline!</td></tr><tr><td style="text-align:left">刀剑神域 进击篇*</td><td style="text-align:left">第 1 卷</td><td style="text-align:left">2019.04.27</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordArtOnline!</td></tr><tr><td style="text-align:left">刀剑神域 进击篇*</td><td style="text-align:left">第 2 卷</td><td style="text-align:left">2019.04.30</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordArtOnline!</td></tr><tr><td style="text-align:left">刀剑神域 进击篇*</td><td style="text-align:left">第 3 卷</td><td style="text-align:left">2019.05.03</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordArtOnline!</td></tr><tr><td style="text-align:left">刀剑神域 进击篇*</td><td style="text-align:left">第 4 卷</td><td style="text-align:left">2019.05.10</td><td style="text-align:left">[Japan]川原砾</td><td style="text-align:left">SwordArtOnline!</td></tr><tr><td style="text-align:left">Re:从零开始的异世界生活*</td><td style="text-align:left">第 1 卷</td><td style="text-align:left">2019.05.17</td><td style="text-align:left">[Japan]长月达平</td><td style="text-align:left">E·M·T!</td></tr><tr><td style="text-align:left">Re:从零开始的异世界生活*</td><td style="text-align:left">第 2 卷</td><td style="text-align:left">-</td><td style="text-align:left">[Japan]长月达平</td><td style="text-align:left">蕾姆拉姆!</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="ACGN" scheme="http://micromaker.github.io/tags/ACGN/"/>
    
  </entry>
  
</feed>
